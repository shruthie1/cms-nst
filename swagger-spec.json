{
  "openapi": "3.0.0",
  "paths": {
    "/configuration": {
      "get": {
        "operationId": "ConfigurationController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get configuration data",
        "tags": [
          "Configuration"
        ]
      },
      "patch": {
        "operationId": "ConfigurationController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update configuration",
        "tags": [
          "Configuration"
        ]
      }
    },
    "/builds": {
      "get": {
        "operationId": "BuildController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get build data",
        "tags": [
          "Build"
        ]
      },
      "patch": {
        "operationId": "BuildController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update build",
        "tags": [
          "Build"
        ]
      }
    },
    "/clients": {
      "post": {
        "operationId": "ClientController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The user data has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Create user data",
        "tags": [
          "Clients"
        ]
      },
      "get": {
        "operationId": "ClientController_findAll",
        "parameters": [],
        "responses": {
          "default": {
            "description": "All user data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all user data",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/search": {
      "get": {
        "operationId": "ClientController_search",
        "parameters": [
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbcoll",
            "required": false,
            "in": "query",
            "description": "Database collection name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelLink",
            "required": false,
            "in": "query",
            "description": "Channel link",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link",
            "required": false,
            "in": "query",
            "description": "Client link",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Name of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "required": false,
            "in": "query",
            "description": "Phone number of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "required": false,
            "in": "query",
            "description": "Password of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repl",
            "required": false,
            "in": "query",
            "description": "Repl link of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promoteRepl",
            "required": false,
            "in": "query",
            "description": "Promotion Repl link of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientName",
            "required": false,
            "in": "query",
            "description": "Clientname of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployKey",
            "required": false,
            "in": "query",
            "description": "Deployment key URL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mainAccount",
            "required": false,
            "in": "query",
            "description": "Main account of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "required": false,
            "in": "query",
            "description": "Product associated with the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasPromoteMobiles",
            "required": false,
            "in": "query",
            "description": "Search by client ID that has promote mobiles assigned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qrId",
            "required": false,
            "in": "query",
            "description": "Paytm QR ID of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gpayId",
            "required": false,
            "in": "query",
            "description": "Google Pay ID of the client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Matching user data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "summary": "Search user data",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/search/promote-mobile": {
      "get": {
        "operationId": "ClientController_searchByPromoteMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "query",
            "description": "Promote mobile number to search for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Clients with matching promote mobiles returned successfully.",
            "schema": {
              "properties": {
                "clients": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                },
                "matches": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "type": "string"
                      },
                      "mobile": {
                        "type": "string"
                      }
                    }
                  }
                },
                "searchedMobile": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Search clients by promote mobile numbers",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/search/enhanced": {
      "get": {
        "operationId": "ClientController_enhancedSearch",
        "parameters": [
          {
            "name": "hasPromoteMobiles",
            "required": false,
            "in": "query",
            "description": "Filter by clients that have promote mobiles (true/false)",
            "schema": {}
          },
          {
            "name": "promoteMobileNumber",
            "required": false,
            "in": "query",
            "description": "Promote mobile number to search for",
            "schema": {}
          }
        ],
        "responses": {
          "default": {
            "description": "Enhanced search results with promote mobile context.",
            "schema": {
              "properties": {
                "clients": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                },
                "searchType": {
                  "type": "string"
                },
                "promoteMobileMatches": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "type": "string"
                      },
                      "mobile": {
                        "type": "string"
                      }
                    }
                  }
                },
                "totalResults": {
                  "type": "number"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enhanced search with promote mobile support",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/updateClient/{clientId}": {
      "get": {
        "operationId": "ClientController_updateClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Return the user data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get user data by ID",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/maskedCls": {
      "get": {
        "operationId": "ClientController_findAllMasked",
        "parameters": [],
        "responses": {
          "default": {
            "description": "All user data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all user data with masked fields",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/maskedCls/{clientId}": {
      "get": {
        "operationId": "ClientController_findOneMasked",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "User data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Get user data with masked fields by ID",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/sync-npoint": {
      "get": {
        "operationId": "ClientController_syncNpoint",
        "parameters": [],
        "responses": {
          "default": {
            "description": "Clients synchronized successfully with npoint."
          }
        },
        "summary": "Sync clients with npoint service",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}": {
      "get": {
        "operationId": "ClientController_findOne",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "User data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Get user data by ID",
        "tags": [
          "Clients"
        ]
      },
      "patch": {
        "operationId": "ClientController_update",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The user data has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Update user data by ID",
        "tags": [
          "Clients"
        ]
      },
      "delete": {
        "operationId": "ClientController_remove",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The user data has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Delete user data by ID",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/query": {
      "post": {
        "operationId": "ClientController_executeQuery",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "query": {
                    "type": "object"
                  },
                  "sort": {
                    "type": "object"
                  },
                  "limit": {
                    "type": "number"
                  },
                  "skip": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Query executed successfully."
          }
        },
        "summary": "Execute a custom MongoDB query",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}/promoteMobile/add": {
      "patch": {
        "operationId": "ClientController_addPromoteMobile",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mobileNumber": {
                    "type": "string",
                    "example": "916265240911"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Mobile number assigned as promote mobile successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Add a mobile number as a promote mobile for a specific client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}/promoteMobile/remove": {
      "patch": {
        "operationId": "ClientController_removePromoteMobile",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mobileNumber": {
                    "type": "string",
                    "example": "916265240911"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Promote mobile assignment removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "summary": "Remove a promote mobile assignment from a specific client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}/ip-info": {
      "get": {
        "operationId": "ClientController_getClientIpInfo",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "IP information retrieved successfully",
            "schema": {
              "properties": {
                "clientId": {
                  "type": "string"
                },
                "mobiles": {
                  "type": "object",
                  "properties": {
                    "mainMobile": {
                      "type": "object",
                      "properties": {
                        "mobile": {
                          "type": "string"
                        },
                        "hasIp": {
                          "type": "boolean"
                        },
                        "ipAddress": {
                          "type": "string"
                        }
                      }
                    },
                    "promoteMobiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mobile": {
                            "type": "string"
                          },
                          "hasIp": {
                            "type": "boolean"
                          },
                          "ipAddress": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "needingAssignment": {
                  "type": "object",
                  "properties": {
                    "mainMobile": {
                      "type": "string"
                    },
                    "promoteMobiles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get IP assignment information for a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/mobile/{mobile}/ip": {
      "get": {
        "operationId": "ClientController_getIpForMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Client ID for context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "IP address retrieved successfully",
            "schema": {
              "properties": {
                "mobile": {
                  "type": "string"
                },
                "ipAddress": {
                  "type": "string",
                  "nullable": true
                },
                "hasAssignment": {
                  "type": "boolean"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get IP address for a specific mobile number",
        "tags": [
          "Clients"
        ]
      },
      "delete": {
        "operationId": "ClientController_releaseIpFromMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number to release IP from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "IP released successfully",
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Release IP from a mobile number",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}/auto-assign-ips": {
      "post": {
        "operationId": "ClientController_autoAssignIpsToClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "IPs assigned successfully",
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Auto-assign IPs to all client mobile numbers (Simplified System)",
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientId}/mobiles-needing-ips": {
      "get": {
        "operationId": "ClientController_getMobilesNeedingIpAssignment",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Mobile numbers needing IP assignment",
            "schema": {
              "properties": {
                "clientId": {
                  "type": "string"
                },
                "mobilesNeedingIps": {
                  "type": "object",
                  "properties": {
                    "mainMobile": {
                      "type": "string"
                    },
                    "promoteMobiles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "summary": {
                  "type": "object",
                  "properties": {
                    "totalNeedingAssignment": {
                      "type": "number"
                    },
                    "mainMobileNeedsIp": {
                      "type": "boolean"
                    },
                    "promoteMobilesNeedingIp": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get mobile numbers that need IP assignment",
        "tags": [
          "Clients"
        ]
      }
    },
    "/bufferclients": {
      "post": {
        "operationId": "BufferClientController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBufferClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BufferClient"
                }
              }
            }
          }
        },
        "summary": "Create user data",
        "tags": [
          "Buffer Clients"
        ]
      },
      "get": {
        "operationId": "BufferClientController_findAll",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BufferClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all user data",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/search": {
      "get": {
        "operationId": "BufferClientController_search",
        "parameters": [
          {
            "name": "mobile",
            "required": false,
            "in": "query",
            "description": "Mobile number to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Client ID to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "Username to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Name to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelLink",
            "required": false,
            "in": "query",
            "description": "Channel link to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repl",
            "required": false,
            "in": "query",
            "description": "Repl link to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BufferClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Search user data",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/updateInfo": {
      "get": {
        "operationId": "BufferClientController_updateInfo",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Update promote Clients Info",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/joinChannelsForBufferClients": {
      "get": {
        "operationId": "BufferClientController_joinChannelsforBufferClients",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Join Channels for BufferClients",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/checkBufferClients": {
      "get": {
        "operationId": "BufferClientController_checkbufferClients",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Check Buffer Clients",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/addNewUserstoBufferClients": {
      "post": {
        "operationId": "BufferClientController_addNewUserstoBufferClients",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "goodIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "badIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Add New Users to Buffer Clients",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/SetAsBufferClient/{mobile}": {
      "get": {
        "operationId": "BufferClientController_setAsBufferClient",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BufferClient"
                }
              }
            }
          }
        },
        "summary": "Set as Buffer Client",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/{mobile}": {
      "get": {
        "operationId": "BufferClientController_findOne",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BufferClient"
                }
              }
            }
          }
        },
        "summary": "Get user data by ID",
        "tags": [
          "Buffer Clients"
        ]
      },
      "patch": {
        "operationId": "BufferClientController_update",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBufferClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BufferClient"
                }
              }
            }
          }
        },
        "summary": "Update user data by ID",
        "tags": [
          "Buffer Clients"
        ]
      },
      "put": {
        "operationId": "BufferClientController_createdOrupdate",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBufferClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BufferClient"
                }
              }
            }
          }
        },
        "summary": "Update user data by ID",
        "tags": [
          "Buffer Clients"
        ]
      },
      "delete": {
        "operationId": "BufferClientController_remove",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "summary": "Delete user data by ID",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/bufferclients/query": {
      "post": {
        "operationId": "BufferClientController_executeQuery",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Execute a custom MongoDB query",
        "tags": [
          "Buffer Clients"
        ]
      }
    },
    "/channels": {
      "post": {
        "operationId": "ChannelsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create a new  channel",
        "tags": [
          "Channels"
        ]
      },
      "get": {
        "operationId": "ChannelsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all  channels",
        "tags": [
          "Channels"
        ]
      }
    },
    "/channels/createMultiple": {
      "post": {
        "operationId": "ChannelsController_createMultiple",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateChannelDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create multiple channels",
        "tags": [
          "Channels"
        ]
      }
    },
    "/channels/search": {
      "get": {
        "operationId": "ChannelsController_search",
        "parameters": [
          {
            "name": "channelId",
            "required": false,
            "in": "query",
            "description": "Unique identifier for the channel",
            "schema": {
              "example": "803387987",
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Title of the channel",
            "schema": {
              "example": "Earn money with Ayesha",
              "type": "string"
            }
          },
          {
            "name": "private",
            "required": false,
            "in": "query",
            "description": "privacy of the channel",
            "schema": {
              "example": false,
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "Username of the channel",
            "schema": {
              "example": "ayesha_channel",
              "type": "string"
            }
          },
          {
            "name": "canSendMsgs",
            "required": false,
            "in": "query",
            "description": "Indicates if the channel can send messages",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "minParticipantsCount",
            "required": false,
            "in": "query",
            "description": "Minimum number of participants in the channel",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxParticipantsCount",
            "required": false,
            "in": "query",
            "description": "Maximum number of participants in the channel",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "sendMessages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restricted",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "participantsCount",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "broadcast",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Search channels by filters",
        "tags": [
          "Channels"
        ]
      }
    },
    "/channels/{channelId}": {
      "get": {
        "operationId": "ChannelsController_findOne",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get an  channel by channelId",
        "tags": [
          "Channels"
        ]
      },
      "patch": {
        "operationId": "ChannelsController_update",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update an  channel by channelId",
        "tags": [
          "Channels"
        ]
      },
      "delete": {
        "operationId": "ChannelsController_remove",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete an  channel by channelId",
        "tags": [
          "Channels"
        ]
      }
    },
    "/user": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create a new user",
        "tags": [
          "Telegram Users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all users",
        "tags": [
          "Telegram Users"
        ]
      }
    },
    "/user/search": {
      "get": {
        "operationId": "UsersController_search",
        "parameters": [
          {
            "name": "tgId",
            "required": false,
            "in": "query",
            "description": "Filter by Telegram ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobile",
            "required": false,
            "in": "query",
            "description": "Filter by mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "twoFA",
            "required": false,
            "in": "query",
            "description": "Filter by twoFA status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "required": false,
            "in": "query",
            "description": "Filter by Expiration status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "session",
            "required": false,
            "in": "query",
            "description": "Filter by session",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "description": "Filter by first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "description": "Filter by last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "Filter by username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channels",
            "required": false,
            "in": "query",
            "description": "Filter by channels count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "personalChats",
            "required": false,
            "in": "query",
            "description": "Filter by personal chats count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "demoGiven",
            "required": false,
            "in": "query",
            "description": "Filter by demo given status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "msgs",
            "required": false,
            "in": "query",
            "description": "Filter by messages count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "totalChats",
            "required": false,
            "in": "query",
            "description": "Filter by total chats count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lastActive",
            "required": false,
            "in": "query",
            "description": "Filter by last active timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movieCount",
            "required": false,
            "in": "query",
            "description": "Filter by movie count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "photoCount",
            "required": false,
            "in": "query",
            "description": "Filter by photo count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "videoCount",
            "required": false,
            "in": "query",
            "description": "Filter by video count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "gender",
            "required": false,
            "in": "query",
            "description": "Filter by gender",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otherPhotoCount",
            "required": false,
            "in": "query",
            "description": "Filter by other photo count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "otherVideoCount",
            "required": false,
            "in": "query",
            "description": "Filter by other video count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ownPhotoCount",
            "required": false,
            "in": "query",
            "description": "Filter by own photo count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ownVideoCount",
            "required": false,
            "in": "query",
            "description": "Filter by own video count",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Search users based on various parameters",
        "tags": [
          "Telegram Users"
        ]
      }
    },
    "/user/{tgId}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "tgId",
            "required": true,
            "in": "path",
            "description": "The Telegram ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get a user by tgId",
        "tags": [
          "Telegram Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "tgId",
            "required": true,
            "in": "path",
            "description": "The Telegram ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update a user by tgId",
        "tags": [
          "Telegram Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "tgId",
            "required": true,
            "in": "path",
            "description": "The Telegram ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete a user by tgId",
        "tags": [
          "Telegram Users"
        ]
      }
    },
    "/user/query": {
      "post": {
        "operationId": "UsersController_executeQuery",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Execute a custom MongoDB query",
        "tags": [
          "Telegram Users"
        ]
      }
    },
    "/userData": {
      "post": {
        "description": "Creates a new user data entry in the database.",
        "operationId": "UserDataController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User data successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          }
        },
        "summary": "Create user data",
        "tags": [
          "UserData of TG clients"
        ]
      },
      "get": {
        "description": "Retrieves all user data entries from the database.",
        "operationId": "UserDataController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all user data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all user data",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/userData/search": {
      "get": {
        "description": "Searches user data based on provided query parameters.",
        "operationId": "UserDataController_search",
        "parameters": [
          {
            "name": "totalCount",
            "required": false,
            "in": "query",
            "description": "Total count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "picCount",
            "required": false,
            "in": "query",
            "description": "Picture count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lastMsgTimeStamp",
            "required": false,
            "in": "query",
            "description": "Last message timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limitTime",
            "required": false,
            "in": "query",
            "description": "Limit time",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "paidCount",
            "required": false,
            "in": "query",
            "description": "Paid count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "prfCount",
            "required": false,
            "in": "query",
            "description": "Profile count",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "canReply",
            "required": false,
            "in": "query",
            "description": "Can reply",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "payAmount",
            "required": false,
            "in": "query",
            "description": "Pay amount",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "Username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessHash",
            "required": false,
            "in": "query",
            "description": "Access hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paidReply",
            "required": false,
            "in": "query",
            "description": "Paid reply status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "demoGiven",
            "required": false,
            "in": "query",
            "description": "Demo given status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "secondShow",
            "required": false,
            "in": "query",
            "description": "Second show status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "profile",
            "required": false,
            "in": "query",
            "description": "User profile identifier",
            "schema": {
              "example": "user123",
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": false,
            "in": "query",
            "description": "Chat ID associated with the user",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          },
          {
            "name": "picsSent",
            "required": false,
            "in": "query",
            "description": "Pics Sent status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "banned",
            "required": false,
            "in": "query",
            "description": "Filter for banned users",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isTesting",
            "required": false,
            "in": "query",
            "description": "Filter for testing users",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching user data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          }
        },
        "summary": "Search user data",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/userData/updateAll/{chatId}": {
      "patch": {
        "description": "Updates all user data entries associated with a specific chat ID.",
        "operationId": "UserDataController_updateAll",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID to update user data for",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User data fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "No user data found for the given chat ID."
          }
        },
        "summary": "Update all user data by chat ID",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/userData/{profile}/{chatId}": {
      "get": {
        "description": "Retrieves a specific user data entry by profile and chat ID.",
        "operationId": "UserDataController_findOne",
        "parameters": [
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "description": "User profile identifier",
            "schema": {
              "example": "user123",
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID associated with the user",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "404": {
            "description": "User data not found."
          }
        },
        "summary": "Get user data by profile and chat ID",
        "tags": [
          "UserData of TG clients"
        ]
      },
      "patch": {
        "description": "Updates a specific user data entry identified by profile and chat ID.",
        "operationId": "UserDataController_update",
        "parameters": [
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "description": "User profile identifier",
            "schema": {
              "example": "user123",
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID associated with the user",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User data fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "User data not found."
          }
        },
        "summary": "Update user data by profile and chat ID",
        "tags": [
          "UserData of TG clients"
        ]
      },
      "delete": {
        "description": "Deletes a specific user data entry identified by profile and chat ID.",
        "operationId": "UserDataController_remove",
        "parameters": [
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "description": "User profile identifier",
            "schema": {
              "example": "user123",
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID associated with the user",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "404": {
            "description": "User data not found."
          }
        },
        "summary": "Delete user data by profile and chat ID",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/userData/clear-count": {
      "get": {
        "description": "Clears the count for user data, optionally filtered by chat ID.",
        "operationId": "UserDataController_clearCount",
        "parameters": [
          {
            "name": "chatId",
            "required": false,
            "in": "query",
            "description": "Chat ID to clear count for",
            "schema": {
              "example": "chat456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count cleared successfully."
          },
          "400": {
            "description": "Invalid chat ID."
          }
        },
        "summary": "Clear count for user data",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/userData/query": {
      "post": {
        "description": "Executes a custom MongoDB query with optional sorting, limiting, and skipping.",
        "operationId": "UserDataController_executeQuery",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "MongoDB query parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "description": "MongoDB query object",
                    "example": {
                      "profile": "user123"
                    }
                  },
                  "sort": {
                    "type": "object",
                    "description": "Sort criteria",
                    "example": {
                      "createdAt": -1
                    }
                  },
                  "limit": {
                    "type": "number",
                    "description": "Maximum number of results",
                    "example": 10
                  },
                  "skip": {
                    "type": "number",
                    "description": "Number of results to skip",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          }
        },
        "summary": "Execute a custom MongoDB query",
        "tags": [
          "UserData of TG clients"
        ]
      }
    },
    "/promoteclients": {
      "post": {
        "operationId": "PromoteClientController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromoteClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Create user data",
        "tags": [
          "Promote Clients"
        ]
      },
      "get": {
        "operationId": "PromoteClientController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status (active/inactive)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoteClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all user data",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/search": {
      "get": {
        "operationId": "PromoteClientController_search",
        "parameters": [
          {
            "name": "tgId",
            "required": false,
            "in": "query",
            "description": "Telegram ID of the client",
            "schema": {
              "example": "123456789",
              "type": "string"
            }
          },
          {
            "name": "mobile",
            "required": false,
            "in": "query",
            "description": "Mobile number",
            "schema": {
              "example": "+1234567890",
              "type": "string"
            }
          },
          {
            "name": "availableDate",
            "required": false,
            "in": "query",
            "description": "availableDate of the promoteClient",
            "schema": {
              "example": "2023-06-22",
              "type": "string"
            }
          },
          {
            "name": "channels",
            "required": false,
            "in": "query",
            "description": "Channel Count",
            "schema": {
              "example": 23,
              "type": "number"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "Username",
            "schema": {}
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "description": "Last name",
            "schema": {}
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "description": "First name",
            "schema": {}
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoteClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Search user data",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/joinChannelsForPromoteClients": {
      "get": {
        "operationId": "PromoteClientController_joinChannelsforPromoteClients",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Join Channels for PromoteClients",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/updateInfo": {
      "get": {
        "operationId": "PromoteClientController_updateInfo",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Update promote Clients Info",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/checkPromoteClients": {
      "get": {
        "operationId": "PromoteClientController_checkpromoteClients",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Check Promote Clients",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/addNewUserstoPromoteClients": {
      "post": {
        "operationId": "PromoteClientController_addNewUserstoPromoteClients",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "goodIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "badIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "clientsNeedingPromoteClients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Add New Users to Promote Clients",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/SetAsPromoteClient/{mobile}": {
      "get": {
        "operationId": "PromoteClientController_setAsPromoteClient",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Set as Promote Client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/mobile/{mobile}": {
      "get": {
        "operationId": "PromoteClientController_findOne",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Get user data by ID",
        "tags": [
          "Promote Clients"
        ]
      },
      "patch": {
        "operationId": "PromoteClientController_update",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromoteClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Update user data by ID",
        "tags": [
          "Promote Clients"
        ]
      },
      "put": {
        "operationId": "PromoteClientController_createdOrupdate",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromoteClientDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Update user data by ID",
        "tags": [
          "Promote Clients"
        ]
      },
      "delete": {
        "operationId": "PromoteClientController_remove",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "User mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "summary": "Delete user data by ID",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/query": {
      "post": {
        "operationId": "PromoteClientController_executeQuery",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Execute a custom MongoDB query",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/distribution": {
      "get": {
        "operationId": "PromoteClientController_getPromoteClientDistribution",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get promote client distribution per client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/status/{status}": {
      "get": {
        "operationId": "PromoteClientController_getPromoteClientsByStatus",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "description": "Status to filter by (active/inactive)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoteClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Get promote clients by status",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/messages/all": {
      "get": {
        "operationId": "PromoteClientController_getPromoteClientsWithMessages",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all promote clients with their status messages",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/status/{mobile}": {
      "patch": {
        "operationId": "PromoteClientController_updateStatus",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the promote client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New status (active/inactive)"
                  },
                  "message": {
                    "type": "string",
                    "description": "Status message (optional)"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Update status of a promote client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/activate/{mobile}": {
      "patch": {
        "operationId": "PromoteClientController_markAsActive",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the promote client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Activation message (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Mark a promote client as active",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/deactivate/{mobile}": {
      "patch": {
        "operationId": "PromoteClientController_markAsInactive",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the promote client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for deactivation"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Mark a promote client as inactive",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/mark-used/{mobile}": {
      "patch": {
        "operationId": "PromoteClientController_markAsUsed",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the promote client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Usage message (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Mark a promote client as used (update lastUsed timestamp)",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/update-last-used/{mobile}": {
      "patch": {
        "operationId": "PromoteClientController_updateLastUsed",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the promote client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Update last used timestamp for a promote client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/least-recently-used/{clientId}": {
      "get": {
        "operationId": "PromoteClientController_getLeastRecentlyUsed",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID to get promote clients for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of promote clients to return",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoteClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Get least recently used promote clients for a specific client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/next-available/{clientId}": {
      "get": {
        "operationId": "PromoteClientController_getNextAvailable",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID to get next available promote client for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoteClient"
                }
              }
            }
          }
        },
        "summary": "Get next available promote client for a specific client",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/unused": {
      "get": {
        "operationId": "PromoteClientController_getUnusedPromoteClients",
        "parameters": [
          {
            "name": "hoursAgo",
            "required": false,
            "in": "query",
            "description": "Hours ago cutoff (default: 24)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Filter by specific client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoteClient"
                  }
                }
              }
            }
          }
        },
        "summary": "Get promote clients that haven't been used for a specified time period",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/promoteclients/usage-stats": {
      "get": {
        "operationId": "PromoteClientController_getUsageStatistics",
        "parameters": [
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Filter by specific client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalClients": {
                      "type": "number"
                    },
                    "neverUsed": {
                      "type": "number"
                    },
                    "usedInLast24Hours": {
                      "type": "number"
                    },
                    "usedInLastWeek": {
                      "type": "number"
                    },
                    "averageUsageGap": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get usage statistics for promote clients",
        "tags": [
          "Promote Clients"
        ]
      }
    },
    "/telegram/connect/{mobile}": {
      "get": {
        "operationId": "TelegramController_connect",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoDisconnect",
            "required": false,
            "in": "query",
            "description": "Whether to auto disconnect the client after period of inactivity",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "handler",
            "required": false,
            "in": "query",
            "description": "Whether to use event handler",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Connect to Telegram",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/disconnect/{mobile}": {
      "get": {
        "operationId": "TelegramController_disconnect",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Disconnect from Telegram",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/disconnect-all": {
      "get": {
        "operationId": "TelegramController_disconnectAll",
        "parameters": [],
        "responses": {
          "default": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Disconnect all clients",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/connection/stats": {
      "get": {
        "operationId": "TelegramController_getConnectionStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get connection statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/connection/state/{mobile}": {
      "get": {
        "operationId": "TelegramController_getClientState",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStatusDto"
                }
              }
            }
          }
        },
        "summary": "Get connection state for a client",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/connection/count": {
      "get": {
        "operationId": "TelegramController_getActiveConnectionCount",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Get active connection count",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/me/{mobile}": {
      "get": {
        "operationId": "TelegramController_getMe",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get current user profile",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/entity/{mobile}/{entity}": {
      "get": {
        "operationId": "TelegramController_getEntity",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "description": "Entity identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get Entity profile",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/profile/update/{mobile}": {
      "post": {
        "operationId": "TelegramController_updateProfile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update profile information",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/profile/photo/{mobile}": {
      "post": {
        "operationId": "TelegramController_setProfilePhoto",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfilePhotoDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Set profile photo",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/profile/photos/{mobile}": {
      "delete": {
        "operationId": "TelegramController_deleteProfilePhotos",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete all profile photos",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/{mobile}": {
      "get": {
        "operationId": "TelegramController_getMessages",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get chat messages",
        "tags": [
          "Telegram"
        ]
      },
      "put": {
        "operationId": "TelegramController_editMessage",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string"
                  },
                  "messageId": {
                    "type": "number"
                  },
                  "text": {
                    "type": "string"
                  },
                  "media": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "photo",
                          "video",
                          "document"
                        ]
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Edit message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/message/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendMessage",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the user account to send the message from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send a Telegram message as a user",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/forward/{mobile}": {
      "post": {
        "operationId": "TelegramController_forwardMessage",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardBatchDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Forward messages",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/batch-process/{mobile}": {
      "post": {
        "operationId": "TelegramController_processBatchMessages",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchProcessDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Process operations in batches",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/search/{mobile}": {
      "get": {
        "description": "Search for messages in a specific chat or globally across all chats",
        "operationId": "TelegramController_searchMessages",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": false,
            "in": "query",
            "description": "Chat ID to search in (required for chat-specific search)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "description": "Search query string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "description": "Filter by multiple types options",
            "schema": {
              "default": [
                "all",
                "text",
                "photo",
                "video",
                "voice",
                "document",
                "roundVideo",
                "roundVoice",
                "sticker",
                "animation",
                "contact",
                "music",
                "chatPhoto"
              ],
              "example": [
                "text",
                "photo"
              ],
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all",
                  "text",
                  "photo",
                  "video",
                  "voice",
                  "document",
                  "roundVideo",
                  "roundVoice",
                  "sticker",
                  "animation",
                  "contact",
                  "music",
                  "chatPhoto"
                ]
              }
            }
          },
          {
            "name": "minId",
            "required": false,
            "in": "query",
            "description": "Minimum message ID for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxId",
            "required": false,
            "in": "query",
            "description": "Maximum message ID for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of messages to retrieve",
            "schema": {
              "minimum": 1,
              "maximum": 500,
              "type": "number"
            }
          },
          {
            "name": "offsetId",
            "required": false,
            "in": "query",
            "description": "Offset ID for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offsetDate",
            "required": false,
            "in": "query",
            "description": "Offset date as Unix timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering messages by date range",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering messages by date range",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Chat ID to search in (required for chat-specific search)",
            "required": false,
            "name": "chatId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search query string",
            "required": false,
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by multiple types options",
            "required": false,
            "name": "types",
            "in": "query",
            "schema": {
              "default": [
                "all",
                "text",
                "photo",
                "video",
                "voice",
                "document",
                "roundVideo",
                "roundVoice",
                "sticker",
                "animation",
                "contact",
                "music",
                "chatPhoto"
              ],
              "example": [
                "text",
                "photo"
              ],
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all",
                  "text",
                  "photo",
                  "video",
                  "voice",
                  "document",
                  "roundVideo",
                  "roundVoice",
                  "sticker",
                  "animation",
                  "contact",
                  "music",
                  "chatPhoto"
                ]
              }
            }
          },
          {
            "description": "Minimum message ID for filtering",
            "required": false,
            "name": "minId",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Maximum message ID for filtering",
            "required": false,
            "name": "maxId",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Maximum number of messages to retrieve",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 500,
              "type": "number"
            }
          },
          {
            "description": "Offset ID for pagination",
            "required": false,
            "name": "offsetId",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Offset date as Unix timestamp",
            "required": false,
            "name": "offsetDate",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Start date for filtering messages by date range",
            "required": false,
            "name": "startDate",
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End date for filtering messages by date range",
            "required": false,
            "name": "endDate",
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMessagesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Search messages in Telegram",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/channels/{mobile}": {
      "get": {
        "operationId": "TelegramController_getChannelInfo",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get channel information",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/forwardMediatoMe/{mobile}": {
      "post": {
        "operationId": "TelegramController_forwardMedia",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "description": "Channel username or ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromChatId",
            "required": false,
            "in": "query",
            "description": "Source chat ID to forward messages from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Forward media messages to me",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/channels/leave/{mobile}": {
      "post": {
        "operationId": "TelegramController_leaveChannel",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "required": true,
            "in": "query",
            "description": "Channel ID/username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Leave channel",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/username/{mobile}": {
      "patch": {
        "operationId": "TelegramController_updateUsername",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the user whose username should be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsernameDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the Telegram username of a user",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/2fa/{mobile}": {
      "post": {
        "operationId": "TelegramController_setup2FA",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Setup two-factor authentication",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/privacy/{mobile}": {
      "post": {
        "operationId": "TelegramController_updatePrivacy",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update privacy settings",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/privacy/batch/{mobile}": {
      "post": {
        "operationId": "TelegramController_updatePrivacyBatch",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacySettingsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update multiple privacy settings",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/sessions/{mobile}": {
      "get": {
        "operationId": "TelegramController_getActiveSessions",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get active sessions",
        "tags": [
          "Telegram"
        ]
      },
      "delete": {
        "operationId": "TelegramController_terminateOtherSessions",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Terminate other sessions",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/sessions/new/{mobile}": {
      "post": {
        "operationId": "TelegramController_createNewSession",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create new session",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/session/info/{mobile}": {
      "get": {
        "operationId": "TelegramController_getSessionInfo",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get session information",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/session/terminate/{mobile}": {
      "post": {
        "operationId": "TelegramController_terminateSession",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hash": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "app",
                      "web"
                    ]
                  },
                  "exceptCurrent": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Terminate specific session",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/monitoring/status": {
      "get": {
        "operationId": "TelegramController_getConnectionStatus",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStatusDto"
                }
              }
            }
          }
        },
        "summary": "Get service health and connection status",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/monitoring/calllog/{mobile}": {
      "get": {
        "operationId": "TelegramController_getCallLogStats",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get call log statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/add-bulk/{mobile}": {
      "post": {
        "operationId": "TelegramController_addContactsBulk",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add multiple contacts in bulk",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/{mobile}": {
      "get": {
        "operationId": "TelegramController_getContacts",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get all contacts",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/send/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendMedia",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMediaDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send media message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/download/{mobile}": {
      "get": {
        "operationId": "TelegramController_downloadMedia",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Download media from a message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/album/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendMediaAlbum",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMediaAlbumDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send media album (multiple photos/videos)",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/metadata/{mobile}": {
      "get": {
        "operationId": "TelegramController_getMediaMetadata",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of messages to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "all",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get media metadata from a chat",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/filter/{mobile}": {
      "get": {
        "operationId": "TelegramController_getFilteredMedia",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "description": "Chat ID to get media from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter media after this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter media before this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of media items to fetch",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minId",
            "required": false,
            "in": "query",
            "description": "Minimum message ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxId",
            "required": false,
            "in": "query",
            "description": "Maximum message ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaMetadataDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get filtered media messages from a chat",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/members/{mobile}": {
      "get": {
        "operationId": "TelegramController_getGroupMembers",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": true,
            "in": "query",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get group members",
        "tags": [
          "Telegram"
        ]
      },
      "post": {
        "operationId": "TelegramController_addGroupMembers",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberOperationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add members to a group",
        "tags": [
          "Telegram"
        ]
      },
      "delete": {
        "operationId": "TelegramController_removeGroupMembers",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberOperationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Remove members from a group",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/block/{mobile}": {
      "post": {
        "operationId": "TelegramController_blockChat",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "description": "Chat/User ID to block",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Block a chat/user",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/{mobile}": {
      "delete": {
        "operationId": "TelegramController_deleteChatHistory",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number of the user whose chat should be deleted",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "peer",
            "required": true,
            "in": "query",
            "description": "Username or Peer ID of the chat to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxId",
            "required": false,
            "in": "query",
            "description": "Delete messages with ID ≤ maxId",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "justClear",
            "required": false,
            "in": "query",
            "description": "Only clear history for this user",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "revoke",
            "required": false,
            "in": "query",
            "description": "Delete for everyone if possible",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "minDate",
            "required": false,
            "in": "query",
            "description": "Minimum date (UNIX timestamp)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxDate",
            "required": false,
            "in": "query",
            "description": "Maximum date (UNIX timestamp)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete or clear a chat history for a user",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/inline/{mobile}": {
      "get": {
        "operationId": "TelegramController_sendMessageWithInlineButton",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send message with inline button",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/dialogs/{mobile}": {
      "get": {
        "operationId": "TelegramController_getAllDialogs",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of dialogs to fetch",
            "schema": {
              "default": 500,
              "type": "number"
            }
          },
          {
            "name": "offsetId",
            "required": false,
            "in": "query",
            "description": "Offset ID for pagination",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "archived",
            "required": false,
            "in": "query",
            "description": "Include archived chats",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get all dialogs",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/last-active/{mobile}": {
      "get": {
        "operationId": "TelegramController_getLastActiveTime",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get last active time",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/create/{mobile}": {
      "post": {
        "operationId": "TelegramController_createGroupWithOptions",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createGroupDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create a new group with advanced options",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/settings/{mobile}": {
      "post": {
        "operationId": "TelegramController_updateGroupSettings",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSettingsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update group settings",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/admin/{mobile}": {
      "post": {
        "operationId": "TelegramController_handleAdminOperation",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminOperationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Promote or demote group admins",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/cleanup/{mobile}": {
      "post": {
        "operationId": "TelegramController_cleanupChat",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCleanupDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Clean up chat history",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/statistics/{mobile}": {
      "get": {
        "operationId": "TelegramController_getChatStatistics",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "description": "Chat ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Statistics period",
            "schema": {
              "enum": [
                "day",
                "week",
                "month"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get chat statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/schedule/{mobile}": {
      "post": {
        "operationId": "TelegramController_scheduleMessage",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleMessageDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Schedule a message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/scheduled/{mobile}": {
      "get": {
        "operationId": "TelegramController_getScheduledMessages",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "description": "Chat ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get scheduled messages",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/voice/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendVoiceMessage",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "number"
                  },
                  "caption": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send voice message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/view-once/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendViewOnceMedia",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string",
                    "description": "Chat ID to send the media to"
                  },
                  "sourceType": {
                    "type": "string",
                    "enum": [
                      "path",
                      "base64",
                      "binary"
                    ],
                    "description": "Source type of media"
                  },
                  "path": {
                    "type": "string",
                    "description": "path of the media file (when sourceType is Path)"
                  },
                  "base64Data": {
                    "type": "string",
                    "description": "Base64 data (when sourceType is base64)"
                  },
                  "binaryData": {
                    "type": "string",
                    "format": "binary",
                    "description": "Binary file (when sourceType is binary)"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Optional caption for the media"
                  },
                  "filename": {
                    "type": "string",
                    "description": "Optional filename for the media"
                  }
                },
                "required": [
                  "chatId",
                  "sourceType"
                ]
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string",
                    "description": "Chat ID to send the media to"
                  },
                  "sourceType": {
                    "type": "string",
                    "enum": [
                      "path",
                      "base64",
                      "binary"
                    ],
                    "description": "Source type of media"
                  },
                  "path": {
                    "type": "string",
                    "description": "path of the media file (when sourceType is Path)"
                  },
                  "base64Data": {
                    "type": "string",
                    "description": "Base64 data (when sourceType is base64)"
                  },
                  "binaryData": {
                    "type": "string",
                    "format": "binary",
                    "description": "Binary file (when sourceType is binary)"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Optional caption for the media"
                  },
                  "filename": {
                    "type": "string",
                    "description": "Optional filename for the media"
                  }
                },
                "required": [
                  "chatId",
                  "sourceType"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send a view once (disappearing) media message",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/history/{mobile}": {
      "get": {
        "operationId": "TelegramController_getChatHistory",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get chat history with metadata",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/admin/promote/{mobile}": {
      "post": {
        "operationId": "TelegramController_promoteToAdmin",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminOperationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Promote members to admin",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/admin/demote/{mobile}": {
      "post": {
        "operationId": "TelegramController_demoteAdmin",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberOperationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Demote admin to regular member",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/unblock/{mobile}": {
      "post": {
        "operationId": "TelegramController_unblockGroupUser",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Unblock a user in a group",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/admins/{mobile}": {
      "get": {
        "operationId": "TelegramController_getGroupAdmins",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": true,
            "in": "query",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get list of group admins",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/group/banned/{mobile}": {
      "get": {
        "operationId": "TelegramController_getGroupBannedUsers",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": true,
            "in": "query",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get list of banned users in a group",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/export/{mobile}": {
      "post": {
        "operationId": "TelegramController_exportContacts",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactExportImportDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Export contacts in vCard or CSV format",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/import/{mobile}": {
      "post": {
        "operationId": "TelegramController_importContacts",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Import contacts from a list",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/block/{mobile}": {
      "post": {
        "operationId": "TelegramController_manageBlockList",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBlockListDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manage blocked contacts",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/contacts/statistics/{mobile}": {
      "get": {
        "operationId": "TelegramController_getContactStatistics",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get contact activity statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/folders/create/{mobile}": {
      "post": {
        "operationId": "TelegramController_createChatFolder",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatFolderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create a new chat folder",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/folders/{mobile}": {
      "get": {
        "operationId": "TelegramController_getChatFolders",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get all chat folders",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chat/settings/{mobile}": {
      "post": {
        "operationId": "TelegramController_updateChatSettings",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "about": {
                    "type": "string"
                  },
                  "photo": {
                    "type": "string"
                  },
                  "slowMode": {
                    "type": "number"
                  },
                  "linkedChat": {
                    "type": "string"
                  },
                  "defaultSendAs": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update chat settings",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/media/batch/{mobile}": {
      "post": {
        "operationId": "TelegramController_sendMediaBatch",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string"
                  },
                  "media": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "photo",
                            "video",
                            "document"
                          ]
                        },
                        "url": {
                          "type": "string"
                        },
                        "caption": {
                          "type": "string"
                        },
                        "fileName": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "silent": {
                    "type": "boolean"
                  },
                  "scheduleDate": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send multiple media files in batch",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/security/2fa-status/{mobile}": {
      "get": {
        "operationId": "TelegramController_hasPassword",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Check if 2FA password is set",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chats/{mobile}": {
      "get": {
        "operationId": "TelegramController_getChats",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offsetDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offsetId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offsetPeer",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get chats with advanced filtering",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/file/url/{mobile}": {
      "get": {
        "operationId": "TelegramController_getFileUrl",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get downloadable URL for a file",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/messages/stats/{mobile}": {
      "get": {
        "operationId": "TelegramController_getMessageStats",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string",
                    "enum": [
                      "day",
                      "week",
                      "month"
                    ]
                  },
                  "fromDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get message statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/chats/top-private/{mobile}": {
      "get": {
        "operationId": "TelegramController_getTopPrivateChats",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get top 5 private chats with detailed statistics",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/bots/add-to-channel/{mobile}": {
      "post": {
        "operationId": "TelegramController_addBotsToChannel",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channelIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of channel IDs to add bots to. If not provided, will use default channels from environment variables."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add bots to channel with admin privileges",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/telegram/bot/create/{mobile}": {
      "post": {
        "operationId": "TelegramController_createBot",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBotDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "schema": {
              "properties": {
                "botToken": {
                  "type": "string",
                  "description": "The token to access HTTP Bot API"
                },
                "username": {
                  "type": "string",
                  "description": "The username of the created bot"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create a new bot using BotFather",
        "tags": [
          "Telegram"
        ]
      }
    },
    "/upi-ids": {
      "get": {
        "operationId": "UpiIdController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get Upi Ids",
        "tags": [
          "UPI Ids"
        ]
      },
      "patch": {
        "operationId": "UpiIdController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update Upi Ids",
        "tags": [
          "UPI Ids"
        ]
      }
    },
    "/npoint/documents/{id}": {
      "get": {
        "operationId": "NpointController_fetchDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the document to fetch",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document fetched successfully"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "summary": "Fetch a document by ID",
        "tags": [
          "NPoint API"
        ]
      },
      "put": {
        "operationId": "NpointController_updateDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the document to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The updated document",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "title": "Updated Document",
                  "content": "This is the updated content of the document."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated successfully"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "summary": "Update a document by ID",
        "tags": [
          "NPoint API"
        ]
      }
    },
    "/npoint/documents": {
      "post": {
        "operationId": "NpointController_postDocument",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The document to post",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "title": "My Document",
                  "content": "This is the content of the document."
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document posted successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "summary": "Post a new document",
        "tags": [
          "NPoint API"
        ]
      },
      "get": {
        "operationId": "NpointController_fetchAllDocuments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all documents fetched successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Fetch all documents",
        "tags": [
          "NPoint API"
        ]
      }
    },
    "/promote-msgs": {
      "get": {
        "operationId": "PromoteMsgsController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get promote-msgs data",
        "tags": [
          "Promote-msgs"
        ]
      },
      "patch": {
        "operationId": "PromoteMsgsController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update promote-msgs",
        "tags": [
          "Promote-msgs"
        ]
      }
    },
    "/transactions": {
      "post": {
        "description": "Creates a new transaction record with the provided details",
        "operationId": "TransactionController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data provided."
          }
        },
        "summary": "Create a new transaction",
        "tags": [
          "Transactions"
        ]
      },
      "get": {
        "description": "Retrieves all transactions with optional filtering, pagination and sorting",
        "operationId": "TransactionController_findAll",
        "parameters": [
          {
            "name": "transactionId",
            "required": false,
            "in": "query",
            "description": "Filter by transaction ID (UTR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "required": false,
            "in": "query",
            "description": "Filter by transaction amount",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "Filter by issue type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refundMethod",
            "required": false,
            "in": "query",
            "description": "Filter by refund method",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": false,
            "in": "query",
            "description": "Filter by user profile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "required": false,
            "in": "query",
            "description": "Filter by chat ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "required": false,
            "in": "query",
            "description": "Filter by IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by transaction status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all transactions",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/{id}": {
      "get": {
        "description": "Retrieves a specific transaction by its unique identifier",
        "operationId": "TransactionController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transaction unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found."
          }
        },
        "summary": "Get transaction by ID",
        "tags": [
          "Transactions"
        ]
      },
      "put": {
        "description": "Updates an existing transaction by its unique identifier",
        "operationId": "TransactionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transaction unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data provided."
          },
          "404": {
            "description": "Transaction not found."
          }
        },
        "summary": "Update a transaction",
        "tags": [
          "Transactions"
        ]
      },
      "delete": {
        "description": "Deletes a transaction by its unique identifier",
        "operationId": "TransactionController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transaction unique identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found."
          }
        },
        "summary": "Delete a transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/timestamps": {
      "get": {
        "operationId": "TimestampController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get timestamp data",
        "tags": [
          "Timestamps"
        ]
      },
      "patch": {
        "operationId": "TimestampController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update timestamp data",
        "tags": [
          "Timestamps"
        ]
      }
    },
    "/timestamps/stalled": {
      "get": {
        "operationId": "TimestampController_getClientsWithTimeDifference",
        "parameters": [
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Minimum time difference in minutes (default: 3)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get clients with time differences greater than threshold",
        "tags": [
          "Timestamps"
        ]
      }
    },
    "/tgsignup/send-code": {
      "post": {
        "description": "Initiates the signup process by sending a verification code via Telegram",
        "operationId": "TgSignupController_sendCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Code sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TgSignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid phone number or failed to send code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid phone number format"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error occurred"
          }
        },
        "summary": "Send verification code to phone number",
        "tags": [
          "tgsignup"
        ]
      }
    },
    "/tgsignup/verify": {
      "post": {
        "description": "Verifies the code sent to phone and completes the signup/login process",
        "operationId": "TgSignupController_verifyCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TgSignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code or verification failed"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error occurred"
          }
        },
        "summary": "Verify code and complete signup/login",
        "tags": [
          "tgsignup"
        ]
      }
    },
    "/active-channels": {
      "post": {
        "operationId": "ActiveChannelsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActiveChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create a new active channel",
        "tags": [
          "Active Channels"
        ]
      },
      "get": {
        "operationId": "ActiveChannelsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all active channels",
        "tags": [
          "Active Channels"
        ]
      }
    },
    "/active-channels/createMultiple": {
      "post": {
        "operationId": "ActiveChannelsController_createMultiple",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateActiveChannelDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create multiple channels",
        "tags": [
          "Active Channels"
        ]
      }
    },
    "/active-channels/search": {
      "get": {
        "operationId": "ActiveChannelsController_search",
        "parameters": [
          {
            "name": "megagroup",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reactRestricted",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "banned",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "availableMsgs",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dMRestriction",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "wordRestriction",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendMessages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restricted",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "participantsCount",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "canSendMsgs",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "broadcast",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "channelId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Search channels by filters",
        "tags": [
          "Active Channels"
        ]
      }
    },
    "/active-channels/{channelId}": {
      "get": {
        "operationId": "ActiveChannelsController_findOne",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get an active channel by channelId",
        "tags": [
          "Active Channels"
        ]
      },
      "patch": {
        "operationId": "ActiveChannelsController_update",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActiveChannelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update an active channel by channelId",
        "tags": [
          "Active Channels"
        ]
      },
      "delete": {
        "operationId": "ActiveChannelsController_remove",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete an active channel by channelId",
        "tags": [
          "Active Channels"
        ]
      }
    },
    "/stats": {
      "post": {
        "operationId": "StatController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "stats"
        ]
      },
      "delete": {
        "operationId": "StatController_deleteAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats"
        ]
      }
    },
    "/stats/{chatId}/{profile}": {
      "get": {
        "operationId": "StatController_findByChatIdAndProfile",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats"
        ]
      },
      "put": {
        "operationId": "StatController_update",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats"
        ]
      },
      "delete": {
        "operationId": "StatController_deleteOne",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats"
        ]
      }
    },
    "/stats2": {
      "post": {
        "operationId": "Stat2Controller_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "stats2"
        ]
      },
      "delete": {
        "operationId": "Stat2Controller_deleteAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats2"
        ]
      }
    },
    "/stats2/{chatId}/{profile}": {
      "get": {
        "operationId": "Stat2Controller_findByChatIdAndProfile",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats2"
        ]
      },
      "put": {
        "operationId": "Stat2Controller_update",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats2"
        ]
      },
      "delete": {
        "operationId": "Stat2Controller_deleteOne",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stats2"
        ]
      }
    },
    "/promote-stats": {
      "post": {
        "operationId": "PromoteStatController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromoteStatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "promote-stats"
        ]
      },
      "delete": {
        "operationId": "PromoteStatController_deleteAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "promote-stats"
        ]
      }
    },
    "/promote-stats/{client}": {
      "get": {
        "operationId": "PromoteStatController_findByClient",
        "parameters": [
          {
            "name": "client",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "promote-stats"
        ]
      },
      "put": {
        "operationId": "PromoteStatController_update",
        "parameters": [
          {
            "name": "client",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromoteStatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "promote-stats"
        ]
      },
      "delete": {
        "operationId": "PromoteStatController_deleteOne",
        "parameters": [
          {
            "name": "client",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "promote-stats"
        ]
      }
    },
    "/telegram/session/create": {
      "post": {
        "description": "Creates or retrieves a session based on provided parameters. If forceNew is true, always creates a new session. If forceNew is false, returns active session if exists and was used this month, otherwise creates new.",
        "operationId": "SessionController_createSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session created or retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Session created successfully"
                    },
                    "session": {
                      "type": "string",
                      "example": "1BVtsOHIBu2iBJgvn6U6SfJTgN6z..."
                    },
                    "isNew": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed or session creation failed"
          }
        },
        "summary": "Master session creation endpoint",
        "tags": [
          "Telegram Session Management"
        ]
      }
    },
    "/telegram/session/audit/search": {
      "get": {
        "description": "Search and retrieve session audit records based on various criteria",
        "operationId": "SessionController_searchAudit",
        "parameters": [
          {
            "name": "mobile",
            "required": false,
            "in": "query",
            "description": "Phone number to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by session status",
            "schema": {
              "enum": [
                "created",
                "active",
                "expired",
                "revoked",
                "failed"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of records to skip (default: 0)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mobile": {
                            "type": "string",
                            "example": "916265240911"
                          },
                          "sessionString": {
                            "type": "string",
                            "example": "1BQANOTEuM==..."
                          },
                          "status": {
                            "type": "string",
                            "example": "active"
                          },
                          "creationMethod": {
                            "type": "string",
                            "example": "old_session"
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2023-12-01T10:00:00Z"
                          },
                          "lastUsedAt": {
                            "type": "string",
                            "example": "2023-12-01T15:30:00Z"
                          },
                          "usageCount": {
                            "type": "number",
                            "example": 5
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 25
                    },
                    "message": {
                      "type": "string",
                      "example": "Audit records retrieved successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Search existing audit sessions",
        "tags": [
          "Telegram Session Management"
        ]
      }
    },
    "/telegram/session/oldest": {
      "post": {
        "description": "Returns the oldest valid session for the mobile number. If no valid session exists and allowFallback is true, creates a new session as fallback. This endpoint is optimized for stability and reliability.",
        "operationId": "SessionController_getOldestSessionOrCreate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOldestSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session retrieved or created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Oldest session retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "session": {
                          "type": "string",
                          "example": "1BVtsOHIBu2iBJgvn6U6SfJTgN6z..."
                        },
                        "sessionAge": {
                          "type": "number",
                          "example": 5,
                          "description": "Age of session in days"
                        },
                        "isNew": {
                          "type": "boolean",
                          "example": false,
                          "description": "Whether this is a newly created session"
                        },
                        "usageCount": {
                          "type": "number",
                          "example": 12,
                          "description": "Number of times this session has been used"
                        },
                        "lastUsedAt": {
                          "type": "string",
                          "example": "2024-08-05T10:30:00Z",
                          "description": "When the session was last used"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2024-08-01T14:20:00Z",
                          "description": "When the session was created"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation failed or no session available"
          },
          "404": {
            "description": "No valid session found and fallback disabled"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get oldest valid session or create new session as fallback",
        "tags": [
          "Telegram Session Management"
        ]
      }
    },
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/setupClient/{clientId}": {
      "get": {
        "operationId": "AppController_setupClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          },
          {
            "name": "archiveOld",
            "required": false,
            "in": "query",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "mobile",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formalities",
            "required": false,
            "in": "query",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client setup initiated successfully."
          },
          "400": {
            "description": "Invalid setup parameters."
          }
        },
        "summary": "Set up a Telegram client with query parameters",
        "tags": [
          "App"
        ]
      }
    },
    "/exit": {
      "get": {
        "operationId": "AppController_exit",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Process will exit after 2 seconds."
          }
        },
        "summary": "Exit the running process (for dev/debug only)",
        "tags": [
          "App"
        ]
      }
    },
    "/refreshmap": {
      "get": {
        "operationId": "AppController_refreshmap",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Client map refreshed successfully."
          }
        },
        "summary": "Refresh internal client service map",
        "tags": [
          "App"
        ]
      }
    },
    "/forward": {
      "get": {
        "operationId": "AppController_forward",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "The full external URL to forward to",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Response from the forwarded request."
          },
          "400": {
            "description": "Missing or invalid \"url\" query parameter."
          }
        },
        "summary": "Forward a GET request to an external URL with query parameters",
        "tags": [
          "App"
        ]
      }
    },
    "/ip-management/proxy-ips": {
      "post": {
        "operationId": "IpManagementController_createProxyIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProxyIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Proxy IP created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyIp"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Proxy IP already exists"
          }
        },
        "summary": "Create a new proxy IP",
        "tags": [
          "IP Management"
        ]
      },
      "get": {
        "operationId": "IpManagementController_getAllProxyIps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Proxy IPs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProxyIp"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all proxy IPs",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/proxy-ips/bulk": {
      "post": {
        "operationId": "IpManagementController_bulkCreateProxyIps",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateProxyIpDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk creation completed"
          }
        },
        "summary": "Bulk create proxy IPs",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/proxy-ips/{ipAddress}/{port}": {
      "put": {
        "operationId": "IpManagementController_updateProxyIp",
        "parameters": [
          {
            "name": "ipAddress",
            "required": true,
            "in": "path",
            "description": "IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "required": true,
            "in": "path",
            "description": "Port number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProxyIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Proxy IP updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyIp"
                }
              }
            }
          },
          "404": {
            "description": "Proxy IP not found"
          }
        },
        "summary": "Update a proxy IP",
        "tags": [
          "IP Management"
        ]
      },
      "delete": {
        "operationId": "IpManagementController_deleteProxyIp",
        "parameters": [
          {
            "name": "ipAddress",
            "required": true,
            "in": "path",
            "description": "IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "required": true,
            "in": "path",
            "description": "Port number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Proxy IP deleted successfully"
          },
          "400": {
            "description": "Cannot delete assigned IP"
          },
          "404": {
            "description": "Proxy IP not found"
          }
        },
        "summary": "Delete a proxy IP",
        "tags": [
          "IP Management"
        ]
      },
      "get": {
        "operationId": "IpManagementController_getProxyIpById",
        "parameters": [
          {
            "name": "ipAddress",
            "required": true,
            "in": "path",
            "description": "IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "required": true,
            "in": "path",
            "description": "Port number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Proxy IP found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyIp"
                }
              }
            }
          },
          "404": {
            "description": "Proxy IP not found"
          }
        },
        "summary": "Get a specific proxy IP",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/mappings/mobile/{mobile}/ip": {
      "get": {
        "operationId": "IpManagementController_getIpForMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP address found"
          },
          "404": {
            "description": "No IP assigned to this mobile"
          }
        },
        "summary": "Get IP address assigned to a mobile number",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/assign": {
      "post": {
        "operationId": "IpManagementController_assignIpToMobile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignIpToMobileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IP assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpMobileMapping"
                }
              }
            }
          },
          "400": {
            "description": "Assignment failed"
          }
        },
        "summary": "Assign an IP to a mobile number",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/assign/bulk": {
      "post": {
        "operationId": "IpManagementController_bulkAssignIps",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAssignIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk assignment completed"
          }
        },
        "summary": "Bulk assign IPs to multiple mobile numbers",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/assign/mobile/{mobile}": {
      "delete": {
        "operationId": "IpManagementController_releaseIpFromMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseIpFromMobileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IP released successfully"
          },
          "404": {
            "description": "No IP assignment found for mobile"
          }
        },
        "summary": "Release IP from a mobile number",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/clients/{clientId}/mappings": {
      "get": {
        "operationId": "IpManagementController_getClientMappings",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client mappings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IpMobileMapping"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all mobile mappings for a client",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/statistics": {
      "get": {
        "operationId": "IpManagementController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        },
        "summary": "Get IP management statistics",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/health": {
      "get": {
        "operationId": "IpManagementController_getHealthStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Health status retrieved successfully"
          }
        },
        "summary": "Get IP management health status",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/clients/{clientId}/assigned-ips": {
      "get": {
        "operationId": "IpManagementController_getClientAssignedIps",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client assigned IPs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProxyIp"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all IPs assigned to a client",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/ip-management/available-count": {
      "get": {
        "operationId": "IpManagementController_getAvailableIpCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available IP count retrieved successfully"
          }
        },
        "summary": "Get count of available IPs",
        "tags": [
          "IP Management"
        ]
      }
    },
    "/client-ip-integration/clients/{clientId}/auto-assign-ips": {
      "post": {
        "operationId": "ClientIpIntegrationController_autoAssignIpsToClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IPs assigned successfully"
          }
        },
        "summary": "Auto-assign IPs to all client mobile numbers",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/mobile/{mobile}/ip": {
      "get": {
        "operationId": "ClientIpIntegrationController_getIpForMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Optional client ID for context",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoAssign",
            "required": false,
            "in": "query",
            "description": "Auto-assign IP if not found and context available",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP address retrieved or assigned"
          }
        },
        "summary": "Get IP assigned to a mobile number with smart assignment",
        "tags": [
          "Client IP Integration"
        ]
      },
      "delete": {
        "operationId": "ClientIpIntegrationController_releaseIpFromMobile",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Optional client ID for context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP released successfully"
          }
        },
        "summary": "Release IP from a mobile number",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/clients/{clientId}/ip-summary": {
      "get": {
        "operationId": "ClientIpIntegrationController_getClientIpSummary",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client IP summary retrieved successfully"
          }
        },
        "summary": "Get comprehensive IP information for a client",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/clients/{clientId}/auto-assign-all-ips": {
      "post": {
        "operationId": "ClientIpIntegrationController_autoAssignAllIpsViaClientService",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IPs auto-assigned using ClientService"
          }
        },
        "summary": "Auto-assign IPs to all client mobile numbers (alternative endpoint)",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/clients/{clientId}/assign-main-mobile-ip": {
      "post": {
        "operationId": "ClientIpIntegrationController_assignIpToMainMobile",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mobile": {
                    "type": "string",
                    "description": "Mobile number"
                  },
                  "preferredCountry": {
                    "type": "string",
                    "description": "Preferred country code"
                  }
                },
                "required": [
                  "mobile"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IP assigned to main mobile"
          }
        },
        "summary": "Assign IP to client main mobile number",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/clients/{clientId}/assign-promote-mobiles-ips": {
      "post": {
        "operationId": "ClientIpIntegrationController_assignIpsToPromoteMobiles",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "description": "Client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "promoteMobiles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of promote mobile numbers"
                  },
                  "preferredCountry": {
                    "type": "string",
                    "description": "Preferred country code"
                  }
                },
                "required": [
                  "promoteMobiles"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IPs assigned to promote mobiles"
          }
        },
        "summary": "Assign IPs to client promote mobile numbers",
        "tags": [
          "Client IP Integration"
        ]
      }
    },
    "/client-ip-integration/mobile/{mobile}/status": {
      "get": {
        "operationId": "ClientIpIntegrationController_checkMobileIpStatus",
        "parameters": [
          {
            "name": "mobile",
            "required": true,
            "in": "path",
            "description": "Mobile number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mobile IP status retrieved successfully"
          }
        },
        "summary": "Check IP assignment status for a mobile number",
        "tags": [
          "Client IP Integration"
        ]
      }
    }
  },
  "info": {
    "title": "NestJS and Express API",
    "description": "API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "x-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "Object": {
        "type": "object",
        "properties": {}
      },
      "CreateClientDto": {
        "type": "object",
        "properties": {
          "channelLink": {
            "type": "string",
            "example": "paid_giirl_shruthiee",
            "description": "Channel link of the user"
          },
          "dbcoll": {
            "type": "string",
            "example": "shruthi",
            "description": "Database collection name"
          },
          "link": {
            "type": "string",
            "example": "PaidGirl.netlify.app/Shruthi1",
            "description": "Link of the user"
          },
          "name": {
            "type": "string",
            "example": "Shruthi Reddy",
            "description": "Name of the user"
          },
          "mobile": {
            "type": "string",
            "example": "+916265240911",
            "description": "Phone number of the user"
          },
          "password": {
            "type": "string",
            "example": "Ajtdmwajt1@",
            "description": "Password of the user"
          },
          "repl": {
            "type": "string",
            "example": "https://shruthi1.glitch.me",
            "description": "Repl link of the user"
          },
          "promoteRepl": {
            "type": "string",
            "example": "https://shruthiprom0101.glitch.me",
            "description": "Promotion Repl link of the user"
          },
          "session": {
            "type": "string",
            "example": "1BQANOTEuMTA4LjUg==",
            "description": "Session token"
          },
          "username": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Username of the user"
          },
          "clientId": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client ID of the user"
          },
          "deployKey": {
            "type": "string",
            "example": "https://shruthi1.glitch.me/exit",
            "description": "Deployment key URL"
          },
          "mainAccount": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Main account of the user"
          },
          "product": {
            "type": "string",
            "example": "booklet_10",
            "description": "Product associated with the user"
          },
          "qrId": {
            "type": "string",
            "example": "paytmqr281005050101xv6mfg02t4m9@paytm",
            "description": "Paytm QR ID of the user"
          },
          "gpayId": {
            "type": "string",
            "example": "myred1808@postbank",
            "description": "Google Pay ID of the user"
          },
          "dedicatedIps": {
            "example": [
              "192.168.1.100:8080",
              "192.168.1.101:8080"
            ],
            "description": "Dedicated proxy IPs assigned to this client",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferredIpCountry": {
            "type": "string",
            "example": "US",
            "description": "Preferred country for IP assignment"
          },
          "autoAssignIps": {
            "type": "boolean",
            "example": true,
            "description": "Whether to auto-assign IPs to mobile numbers"
          }
        },
        "required": [
          "channelLink",
          "dbcoll",
          "link",
          "name",
          "mobile",
          "password",
          "repl",
          "promoteRepl",
          "session",
          "username",
          "clientId",
          "deployKey",
          "mainAccount",
          "product"
        ]
      },
      "Client": {
        "type": "object",
        "properties": {
          "channelLink": {
            "type": "string",
            "example": "paid_giirl_shruthiee",
            "description": "Channel link of the user"
          },
          "dbcoll": {
            "type": "string",
            "example": "shruthi",
            "description": "Database collection name"
          },
          "link": {
            "type": "string",
            "example": "PaidGirl.netlify.app/Shruthi1",
            "description": "Link of the user"
          },
          "name": {
            "type": "string",
            "example": "Shruthi Reddy",
            "description": "Name of the user"
          },
          "mobile": {
            "type": "string",
            "example": "916265240911",
            "description": "mobile number of the user"
          },
          "password": {
            "type": "string",
            "example": "Ajtdmwajt1@",
            "description": "Password of the user"
          },
          "repl": {
            "type": "string",
            "example": "https://shruthi1.glitch.me",
            "description": "Repl link of the user"
          },
          "promoteRepl": {
            "type": "string",
            "example": "https://shruthiprom0101.glitch.me",
            "description": "Promotion Repl link of the user"
          },
          "session": {
            "type": "string",
            "example": "1BQANOTEuM==",
            "description": "Session token"
          },
          "username": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Username of the user"
          },
          "clientId": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client ID of the user"
          },
          "deployKey": {
            "type": "string",
            "example": "https://shruthi1.glitch.me/exit",
            "description": "Deployment key URL"
          },
          "mainAccount": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Main account of the user"
          },
          "product": {
            "type": "string",
            "example": "booklet_10",
            "description": "Product associated with the user"
          },
          "qrId": {
            "type": "string",
            "example": "paytmqr281005050101xv6mfg02t4m9@paytm",
            "description": "Paytm QR ID of the user"
          },
          "gpayId": {
            "type": "string",
            "example": "myred1808@postbank",
            "description": "Google Pay ID of the user"
          },
          "dedicatedIps": {
            "example": [
              "192.168.1.100:8080",
              "192.168.1.101:8080"
            ],
            "description": "Dedicated proxy IPs assigned to this client",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "channelLink",
          "dbcoll",
          "link",
          "name",
          "mobile",
          "password",
          "repl",
          "promoteRepl",
          "session",
          "username",
          "clientId",
          "deployKey",
          "mainAccount",
          "product",
          "qrId",
          "gpayId",
          "dedicatedIps"
        ]
      },
      "UpdateClientDto": {
        "type": "object",
        "properties": {
          "channelLink": {
            "type": "string",
            "example": "paid_giirl_shruthiee",
            "description": "Channel link of the user"
          },
          "dbcoll": {
            "type": "string",
            "example": "shruthi",
            "description": "Database collection name"
          },
          "link": {
            "type": "string",
            "example": "PaidGirl.netlify.app/Shruthi1",
            "description": "Link of the user"
          },
          "name": {
            "type": "string",
            "example": "Shruthi Reddy",
            "description": "Name of the user"
          },
          "mobile": {
            "type": "string",
            "example": "+916265240911",
            "description": "Phone number of the user"
          },
          "password": {
            "type": "string",
            "example": "Ajtdmwajt1@",
            "description": "Password of the user"
          },
          "repl": {
            "type": "string",
            "example": "https://shruthi1.glitch.me",
            "description": "Repl link of the user"
          },
          "promoteRepl": {
            "type": "string",
            "example": "https://shruthiprom0101.glitch.me",
            "description": "Promotion Repl link of the user"
          },
          "session": {
            "type": "string",
            "example": "1BQANOTEuMTA4LjUg==",
            "description": "Session token"
          },
          "username": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Username of the user"
          },
          "clientId": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client ID of the user"
          },
          "deployKey": {
            "type": "string",
            "example": "https://shruthi1.glitch.me/exit",
            "description": "Deployment key URL"
          },
          "mainAccount": {
            "type": "string",
            "example": "ShruthiRedd2",
            "description": "Main account of the user"
          },
          "product": {
            "type": "string",
            "example": "booklet_10",
            "description": "Product associated with the user"
          },
          "qrId": {
            "type": "string",
            "example": "paytmqr281005050101xv6mfg02t4m9@paytm",
            "description": "Paytm QR ID of the user"
          },
          "gpayId": {
            "type": "string",
            "example": "myred1808@postbank",
            "description": "Google Pay ID of the user"
          },
          "dedicatedIps": {
            "example": [
              "192.168.1.100:8080",
              "192.168.1.101:8080"
            ],
            "description": "Dedicated proxy IPs assigned to this client",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferredIpCountry": {
            "type": "string",
            "example": "US",
            "description": "Preferred country for IP assignment"
          },
          "autoAssignIps": {
            "type": "boolean",
            "example": true,
            "description": "Whether to auto-assign IPs to mobile numbers"
          }
        }
      },
      "CreateBufferClientDto": {
        "type": "object",
        "properties": {
          "tgId": {
            "type": "string",
            "description": "Telegram ID of the client",
            "example": "123456789"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile number of the client",
            "example": "+1234567890"
          },
          "availableDate": {
            "type": "string",
            "description": "Date of the session",
            "example": "2023-06-22"
          },
          "session": {
            "type": "string",
            "description": "Session identifier",
            "example": "session123"
          },
          "channels": {
            "type": "number",
            "description": "Channel Count",
            "example": 23
          },
          "status": {
            "type": "string",
            "description": "Status of the buffer client",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "default": "active"
          }
        },
        "required": [
          "tgId",
          "mobile",
          "availableDate",
          "session",
          "channels"
        ]
      },
      "BufferClient": {
        "type": "object",
        "properties": {}
      },
      "UpdateBufferClientDto": {
        "type": "object",
        "properties": {
          "tgId": {
            "type": "string",
            "description": "Telegram ID of the client",
            "example": "123456789"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile number of the client",
            "example": "+1234567890"
          },
          "availableDate": {
            "type": "string",
            "description": "Date of the session",
            "example": "2023-06-22"
          },
          "session": {
            "type": "string",
            "description": "Session identifier",
            "example": "session123"
          },
          "channels": {
            "type": "number",
            "description": "Channel Count",
            "example": 23
          },
          "status": {
            "type": "string",
            "description": "Status of the buffer client",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "default": "active"
          }
        }
      },
      "CreateChannelDto": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string",
            "description": "Unique identifier for the channel",
            "example": "803387987"
          },
          "broadcast": {
            "type": "boolean",
            "description": "Whether the channel is a broadcast channel",
            "example": null
          },
          "canSendMsgs": {
            "type": "boolean",
            "description": "Indicates if the channel can send messages",
            "example": true
          },
          "megagroup": {
            "type": "boolean",
            "description": "Whether the channel is a megagroup",
            "example": null
          },
          "participantsCount": {
            "type": "number",
            "description": "Number of participants in the channel",
            "example": 0
          },
          "restricted": {
            "type": "boolean",
            "description": "Whether the channel is restricted",
            "example": null
          },
          "sendMessages": {
            "type": "boolean",
            "description": "Whether the channel can send messages",
            "example": null
          },
          "title": {
            "type": "string",
            "description": "Title of the channel",
            "example": "Earn money with Ayesha"
          },
          "username": {
            "type": "string",
            "description": "Username of the channel",
            "example": null
          },
          "private": {
            "type": "boolean",
            "description": "Whether the channel is private",
            "example": false
          },
          "forbidden": {
            "type": "boolean",
            "default": false,
            "example": false
          }
        },
        "required": [
          "channelId",
          "canSendMsgs",
          "participantsCount",
          "title"
        ]
      },
      "UpdateChannelDto": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string",
            "description": "Unique identifier for the channel",
            "example": "803387987"
          },
          "broadcast": {
            "type": "boolean",
            "description": "Whether the channel is a broadcast channel",
            "example": null
          },
          "canSendMsgs": {
            "type": "boolean",
            "description": "Indicates if the channel can send messages",
            "example": true
          },
          "megagroup": {
            "type": "boolean",
            "description": "Whether the channel is a megagroup",
            "example": null
          },
          "participantsCount": {
            "type": "number",
            "description": "Number of participants in the channel",
            "example": 0
          },
          "restricted": {
            "type": "boolean",
            "description": "Whether the channel is restricted",
            "example": null
          },
          "sendMessages": {
            "type": "boolean",
            "description": "Whether the channel can send messages",
            "example": null
          },
          "title": {
            "type": "string",
            "description": "Title of the channel",
            "example": "Earn money with Ayesha"
          },
          "username": {
            "type": "string",
            "description": "Username of the channel",
            "example": null
          },
          "private": {
            "type": "boolean",
            "description": "Whether the channel is private",
            "example": false
          },
          "forbidden": {
            "type": "boolean",
            "default": false,
            "example": false
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "description": "Mobile number of the user",
            "example": "917330803480"
          },
          "session": {
            "type": "string",
            "description": "Session information of the user",
            "example": "string"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "Praveen"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": null
          },
          "username": {
            "type": "string",
            "description": "Username of the user",
            "example": null
          },
          "channels": {
            "type": "number",
            "description": "Number of channels",
            "example": 56
          },
          "personalChats": {
            "type": "number",
            "description": "Number of personal chats",
            "example": 74
          },
          "msgs": {
            "type": "number",
            "description": "Number of messages",
            "example": 0
          },
          "totalChats": {
            "type": "number",
            "description": "Total number of chats",
            "example": 195
          },
          "lastActive": {
            "type": "string",
            "description": "Timestamp of last active",
            "example": "2024-06-03"
          },
          "tgId": {
            "type": "string",
            "description": "Telegram ID of the user",
            "example": "2022068676"
          },
          "twoFA": {
            "type": "boolean",
            "description": "TwoFA status",
            "example": false
          },
          "expired": {
            "type": "boolean",
            "description": "Expiration status",
            "example": false
          },
          "password": {
            "type": "string",
            "description": "password",
            "example": "pass"
          },
          "movieCount": {
            "type": "number",
            "description": "Number of movies",
            "example": 0
          },
          "photoCount": {
            "type": "number",
            "description": "Number of photos",
            "example": 0
          },
          "videoCount": {
            "type": "number",
            "description": "Number of videos",
            "example": 0
          },
          "gender": {
            "type": "string",
            "description": "Gender of the user",
            "example": null
          },
          "otherPhotoCount": {
            "type": "number",
            "description": "Number of other photos",
            "example": 0
          },
          "otherVideoCount": {
            "type": "number",
            "description": "Number of other videos",
            "example": 0
          },
          "ownPhotoCount": {
            "type": "number",
            "description": "Number of own photos",
            "example": 0
          },
          "ownVideoCount": {
            "type": "number",
            "description": "Number of own videos",
            "example": 0
          },
          "contacts": {
            "type": "number",
            "description": "Number of contacts",
            "example": 105
          },
          "calls": {
            "type": "object",
            "description": "Call details of the user",
            "example": {
              "outgoing": 1,
              "incoming": 0,
              "video": 1,
              "chatCallCounts": [],
              "totalCalls": 1
            }
          },
          "recentUsers": {
            "description": "Call details of the user",
            "example": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "mobile",
          "session",
          "firstName",
          "lastName",
          "username",
          "channels",
          "personalChats",
          "msgs",
          "totalChats",
          "lastActive",
          "tgId",
          "twoFA",
          "expired",
          "password",
          "movieCount",
          "photoCount",
          "videoCount",
          "gender",
          "otherPhotoCount",
          "otherVideoCount",
          "ownPhotoCount",
          "ownVideoCount",
          "contacts",
          "calls"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {}
      },
      "CreateUserDataDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "5787751360",
            "description": "Chat ID"
          },
          "totalCount": {
            "type": "number",
            "example": 1,
            "description": "Total count"
          },
          "picCount": {
            "type": "number",
            "example": 0,
            "description": "Picture count"
          },
          "lastMsgTimeStamp": {
            "type": "number",
            "example": 1718802722566,
            "description": "Last message timestamp"
          },
          "limitTime": {
            "type": "number",
            "example": 1718802742567,
            "description": "Limit time"
          },
          "paidCount": {
            "type": "number",
            "example": 0,
            "description": "Paid count"
          },
          "prfCount": {
            "type": "number",
            "example": 0,
            "description": "Profile count"
          },
          "canReply": {
            "type": "number",
            "example": 1,
            "description": "Can reply"
          },
          "payAmount": {
            "type": "number",
            "example": 0,
            "description": "Pay amount"
          },
          "highestPayAmount": {
            "type": "number",
            "example": 0,
            "description": "highestPayAmount"
          },
          "cheatCount": {
            "type": "number",
            "example": 0,
            "description": "cheatCount",
            "default": 0
          },
          "callTime": {
            "type": "number",
            "example": 0,
            "description": "callTime",
            "default": 0
          },
          "username": {
            "type": "string",
            "example": "بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅",
            "description": "Username"
          },
          "accessHash": {
            "type": "string",
            "example": "-7250939091939055173",
            "description": "Access hash"
          },
          "paidReply": {
            "type": "boolean",
            "example": true,
            "description": "Paid reply status"
          },
          "demoGiven": {
            "type": "boolean",
            "example": false,
            "description": "Demo given status"
          },
          "secondShow": {
            "type": "boolean",
            "example": false,
            "description": "Second show status"
          },
          "profile": {
            "type": "string",
            "example": "sneha",
            "description": "Profile name"
          },
          "picsSent": {
            "type": "boolean",
            "example": false,
            "description": "Pics Sent status"
          },
          "videos": {
            "example": [],
            "description": "videos",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "chatId",
          "totalCount",
          "picCount",
          "lastMsgTimeStamp",
          "limitTime",
          "paidCount",
          "prfCount",
          "canReply",
          "payAmount",
          "highestPayAmount",
          "cheatCount",
          "callTime",
          "username",
          "accessHash",
          "paidReply",
          "demoGiven",
          "secondShow",
          "profile",
          "picsSent",
          "videos"
        ]
      },
      "UserData": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserDataDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "5787751360",
            "description": "Chat ID"
          },
          "totalCount": {
            "type": "number",
            "example": 1,
            "description": "Total count"
          },
          "picCount": {
            "type": "number",
            "example": 0,
            "description": "Picture count"
          },
          "lastMsgTimeStamp": {
            "type": "number",
            "example": 1718802722566,
            "description": "Last message timestamp"
          },
          "limitTime": {
            "type": "number",
            "example": 1718802742567,
            "description": "Limit time"
          },
          "paidCount": {
            "type": "number",
            "example": 0,
            "description": "Paid count"
          },
          "prfCount": {
            "type": "number",
            "example": 0,
            "description": "Profile count"
          },
          "canReply": {
            "type": "number",
            "example": 1,
            "description": "Can reply"
          },
          "payAmount": {
            "type": "number",
            "example": 0,
            "description": "Pay amount"
          },
          "highestPayAmount": {
            "type": "number",
            "example": 0,
            "description": "highestPayAmount"
          },
          "cheatCount": {
            "type": "number",
            "example": 0,
            "description": "cheatCount",
            "default": 0
          },
          "callTime": {
            "type": "number",
            "example": 0,
            "description": "callTime",
            "default": 0
          },
          "username": {
            "type": "string",
            "example": "بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅",
            "description": "Username"
          },
          "accessHash": {
            "type": "string",
            "example": "-7250939091939055173",
            "description": "Access hash"
          },
          "paidReply": {
            "type": "boolean",
            "example": true,
            "description": "Paid reply status"
          },
          "demoGiven": {
            "type": "boolean",
            "example": false,
            "description": "Demo given status"
          },
          "secondShow": {
            "type": "boolean",
            "example": false,
            "description": "Second show status"
          },
          "profile": {
            "type": "string",
            "example": "sneha",
            "description": "Profile name"
          },
          "picsSent": {
            "type": "boolean",
            "example": false,
            "description": "Pics Sent status"
          },
          "videos": {
            "example": [],
            "description": "videos",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreatePromoteClientDto": {
        "type": "object",
        "properties": {
          "tgId": {
            "type": "string",
            "description": "Telegram ID of the client",
            "example": "123456789"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile number of the client",
            "example": "+1234567890"
          },
          "availableDate": {
            "type": "string",
            "description": "Date of the session",
            "example": "2023-06-22"
          },
          "lastActive": {
            "type": "string",
            "description": "lastActive identifier",
            "example": "2023-06-22"
          },
          "channels": {
            "type": "number",
            "description": "Channel Count",
            "example": 23
          },
          "clientId": {
            "type": "string",
            "description": "Client ID this promote mobile belongs to",
            "example": "client123"
          },
          "status": {
            "type": "string",
            "description": "Status of the promote client",
            "example": "active",
            "default": "active"
          },
          "message": {
            "type": "string",
            "description": "Status message for the promote client",
            "example": "Account is functioning properly",
            "default": "Account is functioning properly"
          },
          "lastUsed": {
            "format": "date-time",
            "type": "string",
            "description": "Last used timestamp for the promote client",
            "example": "2023-06-22T10:30:00.000Z"
          }
        },
        "required": [
          "tgId",
          "mobile",
          "availableDate",
          "lastActive",
          "channels"
        ]
      },
      "PromoteClient": {
        "type": "object",
        "properties": {}
      },
      "UpdatePromoteClientDto": {
        "type": "object",
        "properties": {
          "tgId": {
            "type": "string",
            "description": "Telegram ID of the client",
            "example": "123456789"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile number of the client",
            "example": "+1234567890"
          },
          "availableDate": {
            "type": "string",
            "description": "Date of the session",
            "example": "2023-06-22"
          },
          "lastActive": {
            "type": "string",
            "description": "lastActive identifier",
            "example": "2023-06-22"
          },
          "channels": {
            "type": "number",
            "description": "Channel Count",
            "example": 23
          },
          "clientId": {
            "type": "string",
            "description": "Client ID this promote mobile belongs to",
            "example": "client123"
          },
          "status": {
            "type": "string",
            "description": "Status of the promote client",
            "example": "active",
            "default": "active"
          },
          "message": {
            "type": "string",
            "description": "Status message for the promote client",
            "example": "Account is functioning properly",
            "default": "Account is functioning properly"
          },
          "lastUsed": {
            "format": "date-time",
            "type": "string",
            "description": "Last used timestamp for the promote client",
            "example": "2023-06-22T10:30:00.000Z"
          }
        }
      },
      "ConnectionStatusDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Connection state of the client",
            "enum": [
              "connecting",
              "connected",
              "disconnecting",
              "disconnected",
              "error"
            ]
          },
          "autoDisconnect": {
            "type": "boolean",
            "description": "Whether auto disconnect is enabled"
          },
          "lastUsed": {
            "type": "number",
            "description": "When the connection was last used"
          },
          "connectionAttempts": {
            "type": "number",
            "description": "Number of connection attempts"
          },
          "lastError": {
            "type": "string",
            "description": "Last error message if any"
          }
        },
        "required": [
          "state",
          "autoDisconnect",
          "lastUsed",
          "connectionAttempts"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "about": {
            "type": "string",
            "description": "About/bio information"
          }
        },
        "required": [
          "firstName"
        ]
      },
      "ProfilePhotoDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name/identifier of the photo to set"
          }
        },
        "required": [
          "name"
        ]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "peer": {
            "type": "string",
            "description": "Target username or peer ID",
            "example": "someusername"
          },
          "message": {
            "type": "string",
            "description": "Message text to send",
            "example": "Hello from NestJS and GramJS!"
          },
          "parseMode": {
            "type": "string",
            "description": "Optional message parse mode (Markdown, HTML)",
            "example": "Markdown"
          }
        },
        "required": [
          "peer",
          "message"
        ]
      },
      "ForwardBatchDto": {
        "type": "object",
        "properties": {
          "fromChatId": {
            "type": "string",
            "description": "Source chat ID for forwarding"
          },
          "toChatId": {
            "type": "string",
            "description": "Target chat ID for forwarding"
          },
          "messageIds": {
            "description": "Message IDs to forward",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "fromChatId",
          "toChatId",
          "messageIds"
        ]
      },
      "BatchItemDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID for the operation"
          },
          "messageId": {
            "type": "number",
            "description": "Message ID for message operations"
          },
          "fromChatId": {
            "type": "string",
            "description": "Source chat ID for forward operations"
          },
          "toChatId": {
            "type": "string",
            "description": "Target chat ID for forward operations"
          }
        },
        "required": [
          "chatId"
        ]
      },
      "BatchProcessDto": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Operation type",
            "enum": [
              "forward",
              "delete",
              "edit"
            ]
          },
          "items": {
            "description": "Items to process",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchItemDto"
            }
          },
          "batchSize": {
            "type": "number",
            "description": "Number of items to process in each batch"
          },
          "delayMs": {
            "type": "number",
            "description": "Delay between batches in milliseconds",
            "default": 1000
          }
        },
        "required": [
          "operation",
          "items",
          "delayMs"
        ]
      },
      "MessageTypeResult": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "Array of message IDs matching the search criteria",
            "example": [
              1001,
              1005,
              1010
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count of messages matching the search criteria",
            "example": 3
          }
        },
        "required": [
          "messages",
          "total"
        ]
      },
      "SearchMessagesResponseDto": {
        "type": "object",
        "properties": {
          "all": {
            "description": "All message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "text": {
            "description": "Text message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "photo": {
            "description": "Photo message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "video": {
            "description": "Video message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "voice": {
            "description": "Voice message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "document": {
            "description": "Document message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "roundVideo": {
            "description": "Round video message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          },
          "roundVoice": {
            "description": "Round voice message results",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypeResult"
              }
            ]
          }
        }
      },
      "UpdateUsernameDto": {
        "type": "object",
        "properties": {
          "newUsername": {
            "type": "string",
            "description": "New username to set for the Telegram user",
            "example": "new_username123"
          }
        },
        "required": [
          "newUsername"
        ]
      },
      "PrivacySettingsDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Phone number visibility",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          },
          "lastSeen": {
            "type": "string",
            "description": "Last seen visibility",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          },
          "profilePhotos": {
            "type": "string",
            "description": "Profile photos visibility",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          },
          "forwards": {
            "type": "string",
            "description": "Message forwards visibility",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          },
          "calls": {
            "type": "string",
            "description": "Calls privacy",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          },
          "groups": {
            "type": "string",
            "description": "Group chats privacy",
            "enum": [
              "everybody",
              "contacts",
              "nobody"
            ]
          }
        }
      },
      "AddContactsDto": {
        "type": "object",
        "properties": {
          "phoneNumbers": {
            "description": "Phone numbers to add",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": "string",
            "description": "Name prefix to use for added contacts"
          }
        },
        "required": [
          "phoneNumbers",
          "prefix"
        ]
      },
      "SendMediaDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID for media operation"
          },
          "url": {
            "type": "string",
            "description": "URL of the media file"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media"
          },
          "filename": {
            "type": "string",
            "description": "Filename for the media"
          },
          "type": {
            "type": "string",
            "description": "Type of media",
            "enum": [
              "photo",
              "video",
              "document",
              "voice",
              "audio"
            ]
          }
        },
        "required": [
          "chatId",
          "url",
          "filename",
          "type"
        ]
      },
      "MediaAlbumItemDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the media file"
          },
          "type": {
            "type": "string",
            "description": "Type of media",
            "enum": [
              "photo",
              "video",
              "document",
              "voice",
              "audio"
            ]
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media item"
          }
        },
        "required": [
          "url",
          "type"
        ]
      },
      "SendMediaAlbumDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID for media operation"
          },
          "media": {
            "description": "Array of media items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaAlbumItemDto"
            }
          }
        },
        "required": [
          "chatId",
          "media"
        ]
      },
      "MediaMetadataDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID to get metadata from"
          },
          "offset": {
            "type": "number",
            "description": "Message offset"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of items"
          }
        },
        "required": [
          "chatId"
        ]
      },
      "createGroupDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Group title"
          },
          "about": {
            "type": "string",
            "description": "Group description"
          },
          "address": {
            "type": "string",
            "description": "Address or location of the group"
          },
          "slowMode": {
            "type": "number",
            "description": "Slow mode delay in seconds"
          },
          "megagroup": {
            "type": "boolean",
            "description": "Whether the group is a megagroup",
            "default": true
          },
          "broadcast": {
            "type": "boolean",
            "description": "Whether the group is a broadcast",
            "default": true
          },
          "forImport": {
            "type": "boolean",
            "description": "Whether the group is for import",
            "default": false
          },
          "memberRestrictions": {
            "type": "object",
            "description": "Member restrictions"
          }
        },
        "required": [
          "title"
        ]
      },
      "GroupSettingsDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Group ID"
          },
          "title": {
            "type": "string",
            "description": "Group title"
          },
          "username": {
            "type": "string",
            "description": "Group username"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          },
          "address": {
            "type": "string",
            "description": "Address or location of the group"
          },
          "slowMode": {
            "type": "number",
            "description": "Slow mode delay in seconds"
          },
          "megagroup": {
            "type": "boolean",
            "description": "Whether the group is a megagroup",
            "default": true
          },
          "forImport": {
            "type": "boolean",
            "description": "Whether the group is for import",
            "default": false
          },
          "memberRestrictions": {
            "type": "object",
            "description": "Member restrictions"
          }
        },
        "required": [
          "groupId"
        ]
      },
      "GroupMemberOperationDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Group ID"
          },
          "members": {
            "description": "Array of user IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "groupId",
          "members"
        ]
      },
      "AdminPermissionsDto": {
        "type": "object",
        "properties": {
          "changeInfo": {
            "type": "boolean",
            "description": "Permission to change group info",
            "default": true
          },
          "postMessages": {
            "type": "boolean",
            "description": "Permission to post messages",
            "default": true
          },
          "editMessages": {
            "type": "boolean",
            "description": "Permission to edit messages",
            "default": true
          },
          "deleteMessages": {
            "type": "boolean",
            "description": "Permission to delete messages",
            "default": true
          },
          "banUsers": {
            "type": "boolean",
            "description": "Permission to ban users",
            "default": true
          },
          "inviteUsers": {
            "type": "boolean",
            "description": "Permission to invite users",
            "default": true
          },
          "pinMessages": {
            "type": "boolean",
            "description": "Permission to pin messages",
            "default": true
          },
          "addAdmins": {
            "type": "boolean",
            "description": "Permission to add new admins",
            "default": false
          },
          "anonymous": {
            "type": "boolean",
            "description": "Permission to remain anonymous",
            "default": false
          },
          "manageCall": {
            "type": "boolean",
            "description": "Permission to manage voice chats",
            "default": true
          }
        },
        "required": [
          "changeInfo",
          "postMessages",
          "editMessages",
          "deleteMessages",
          "banUsers",
          "inviteUsers",
          "pinMessages",
          "addAdmins",
          "anonymous",
          "manageCall"
        ]
      },
      "AdminOperationDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Group ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID to promote/demote"
          },
          "isPromote": {
            "type": "boolean",
            "description": "Whether to promote or demote"
          },
          "permissions": {
            "description": "Admin permissions",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminPermissionsDto"
              }
            ]
          },
          "rank": {
            "type": "string",
            "description": "Custom admin rank/title"
          }
        },
        "required": [
          "groupId",
          "userId",
          "isPromote"
        ]
      },
      "ChatCleanupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Group ID"
          },
          "chatId": {
            "type": "string",
            "description": "Chat ID to clean up"
          },
          "beforeDate": {
            "format": "date-time",
            "type": "string",
            "description": "Delete messages before this date"
          },
          "onlyMedia": {
            "type": "boolean",
            "description": "Only delete media messages"
          },
          "excludePinned": {
            "type": "boolean",
            "description": "Exclude pinned messages"
          }
        },
        "required": [
          "groupId",
          "chatId"
        ]
      },
      "ScheduleMessageDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID for the operation"
          },
          "message": {
            "type": "string",
            "description": "Message content"
          },
          "scheduledTime": {
            "type": "string",
            "description": "Date to schedule the message"
          },
          "replyTo": {
            "type": "number",
            "description": "Message to reply to"
          },
          "silent": {
            "type": "boolean",
            "description": "Silent notification"
          }
        },
        "required": [
          "chatId",
          "message",
          "scheduledTime"
        ]
      },
      "ContactExportImportDto": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "vcard",
              "csv"
            ],
            "description": "Export format type"
          },
          "includeBlocked": {
            "type": "object",
            "description": "Whether to include blocked contacts",
            "default": false
          }
        },
        "required": [
          "format"
        ]
      },
      "ContactBlockListDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "description": "User IDs to block/unblock",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "block": {
            "type": "boolean",
            "description": "Whether to block or unblock the users"
          }
        },
        "required": [
          "userIds",
          "block"
        ]
      },
      "CreateChatFolderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the chat folder"
          },
          "includedChats": {
            "description": "List of chat IDs to include in the folder",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludedChats": {
            "description": "List of chat IDs to exclude from the folder",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeContacts": {
            "type": "boolean",
            "description": "Include contacts in the folder",
            "default": true
          },
          "includeNonContacts": {
            "type": "boolean",
            "description": "Include non-contacts in the folder",
            "default": true
          },
          "includeGroups": {
            "type": "boolean",
            "description": "Include groups in the folder",
            "default": true
          },
          "includeBroadcasts": {
            "type": "boolean",
            "description": "Include broadcast channels in the folder",
            "default": true
          },
          "includeBots": {
            "type": "boolean",
            "description": "Include bots in the folder",
            "default": true
          },
          "excludeMuted": {
            "type": "boolean",
            "description": "Exclude muted chats from the folder",
            "default": false
          },
          "excludeRead": {
            "type": "boolean",
            "description": "Exclude read chats from the folder",
            "default": false
          },
          "excludeArchived": {
            "type": "boolean",
            "description": "Exclude archived chats from the folder",
            "default": false
          }
        },
        "required": [
          "name",
          "includedChats"
        ]
      },
      "CreateBotDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the bot (required)",
            "example": "MyAwesomeBot"
          },
          "username": {
            "type": "string",
            "description": "Username for the bot (required)",
            "example": "my_awesome_bot"
          },
          "description": {
            "type": "string",
            "description": "Description of what your bot can do",
            "example": "This bot helps you manage your tasks"
          },
          "aboutText": {
            "type": "string",
            "description": "What the bot can be used for",
            "example": "Task Management, Reminders, Notes"
          },
          "profilePhotoUrl": {
            "type": "string",
            "description": "URL to the bot's profile photo",
            "example": "https://example.com/bot-photo.jpg"
          }
        },
        "required": [
          "name",
          "username"
        ]
      },
      "CreateTransactionDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Unique transaction ID (UTR)",
            "example": "TXN123456789",
            "minLength": 8
          },
          "amount": {
            "type": "number",
            "description": "Amount involved in the transaction",
            "example": 100.5,
            "minimum": 0
          },
          "issue": {
            "type": "string",
            "description": "Issue type reported by the user",
            "example": "payment_failed"
          },
          "description": {
            "type": "string",
            "description": "Description of issue reported by the user",
            "example": "Payment failed due to network error"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund method selected by the user",
            "example": "bank_transfer"
          },
          "profile": {
            "type": "string",
            "description": "User profile ID",
            "example": "user123"
          },
          "chatId": {
            "type": "string",
            "description": "User chat ID",
            "example": "chat123"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the user",
            "example": "192.168.1.1"
          },
          "status": {
            "type": "string",
            "description": "Transaction status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "cancelled"
            ],
            "default": "pending"
          }
        },
        "required": [
          "transactionId",
          "amount",
          "issue",
          "description"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Unique transaction ID (UTR)"
          },
          "amount": {
            "type": "number",
            "description": "Amount involved in the transaction"
          },
          "issue": {
            "type": "string",
            "description": "Issue type reported by the user"
          },
          "description": {
            "type": "string",
            "description": "Description of issue reported by the user"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund method selected by the user"
          },
          "profile": {
            "type": "string",
            "description": "User profile ID"
          },
          "chatId": {
            "type": "string",
            "description": "User chat ID"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the user"
          },
          "status": {
            "type": "string",
            "description": "Transaction status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "cancelled"
            ],
            "default": "pending"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "transactionId",
          "amount",
          "issue",
          "description",
          "refundMethod",
          "profile",
          "chatId",
          "ip",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateTransactionDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Unique transaction ID (UTR)",
            "example": "TXN123456789",
            "minLength": 8
          },
          "amount": {
            "type": "number",
            "description": "Amount involved in the transaction",
            "example": 100.5,
            "minimum": 0
          },
          "issue": {
            "type": "string",
            "description": "Issue type reported by the user",
            "example": "payment_failed"
          },
          "description": {
            "type": "string",
            "description": "Description of issue reported by the user",
            "example": "Payment failed due to network error"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund method selected by the user",
            "example": "bank_transfer"
          },
          "profile": {
            "type": "string",
            "description": "User profile ID",
            "example": "user123"
          },
          "chatId": {
            "type": "string",
            "description": "User chat ID",
            "example": "chat123"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the user",
            "example": "192.168.1.1"
          },
          "status": {
            "type": "string",
            "description": "Transaction status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "cancelled"
            ],
            "default": "pending"
          }
        }
      },
      "SendCodeDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number to send the verification code to (international format)",
            "example": "+919876543210"
          }
        },
        "required": [
          "phone"
        ]
      },
      "VerifyCodeDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number used for verification (international format)",
            "example": "919876543210"
          },
          "code": {
            "type": "string",
            "description": "Verification code received",
            "example": "12345"
          },
          "password": {
            "type": "string",
            "description": "Two-factor authentication password if required",
            "example": "yourSecurePassword123"
          }
        },
        "required": [
          "phone",
          "code"
        ]
      },
      "TgSignupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "Operation status code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Login successful"
          },
          "phoneCodeHash": {
            "type": "string",
            "description": "Phone code hash for verification",
            "example": "abc123xyz"
          },
          "isCodeViaApp": {
            "type": "boolean",
            "description": "Whether the code was sent via app",
            "example": true
          },
          "session": {
            "type": "string",
            "description": "Session string for authenticated client"
          },
          "requires2FA": {
            "type": "boolean",
            "description": "Whether 2FA is required",
            "example": false
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "CreateActiveChannelDto": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "broadcast": {
            "type": "boolean",
            "default": false
          },
          "canSendMsgs": {
            "type": "boolean",
            "default": true
          },
          "participantsCount": {
            "type": "number",
            "default": 300
          },
          "restricted": {
            "type": "boolean",
            "default": false
          },
          "sendMessages": {
            "type": "boolean",
            "default": true
          },
          "reactRestricted": {
            "type": "boolean",
            "default": false
          },
          "title": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "wordRestriction": {
            "type": "number",
            "default": 0
          },
          "dMRestriction": {
            "type": "number",
            "default": 0
          },
          "availableMsgs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "banned": {
            "type": "boolean",
            "default": false
          },
          "megagroup": {
            "type": "boolean",
            "default": true
          },
          "forbidden": {
            "type": "boolean",
            "default": false
          },
          "private": {
            "type": "boolean",
            "description": "Whether the channel is private",
            "example": false
          }
        },
        "required": [
          "channelId",
          "broadcast",
          "canSendMsgs",
          "participantsCount",
          "restricted",
          "sendMessages",
          "reactRestricted",
          "title",
          "username",
          "wordRestriction",
          "dMRestriction",
          "availableMsgs",
          "banned"
        ]
      },
      "UpdateActiveChannelDto": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "broadcast": {
            "type": "boolean",
            "default": false
          },
          "canSendMsgs": {
            "type": "boolean",
            "default": true
          },
          "participantsCount": {
            "type": "number",
            "default": 300
          },
          "restricted": {
            "type": "boolean",
            "default": false
          },
          "sendMessages": {
            "type": "boolean",
            "default": true
          },
          "reactRestricted": {
            "type": "boolean",
            "default": false
          },
          "title": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "wordRestriction": {
            "type": "number",
            "default": 0
          },
          "dMRestriction": {
            "type": "number",
            "default": 0
          },
          "availableMsgs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "banned": {
            "type": "boolean",
            "default": false
          },
          "megagroup": {
            "type": "boolean",
            "default": true
          },
          "forbidden": {
            "type": "boolean",
            "default": false
          },
          "private": {
            "type": "boolean",
            "description": "Whether the channel is private",
            "example": false
          }
        }
      },
      "CreateStatDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "6785668464",
            "description": "Chat ID"
          },
          "count": {
            "type": "number",
            "example": 12,
            "description": "Count"
          },
          "payAmount": {
            "type": "number",
            "example": 50,
            "description": "Pay Amount"
          },
          "demoGiven": {
            "type": "boolean",
            "example": true,
            "description": "Demo Given"
          },
          "demoGivenToday": {
            "type": "boolean",
            "example": true,
            "description": "Demo Given Today"
          },
          "newUser": {
            "type": "boolean",
            "example": false,
            "description": "New User"
          },
          "paidReply": {
            "type": "boolean",
            "example": true,
            "description": "Paid Reply"
          },
          "name": {
            "type": "string",
            "example": "Amaan Khan",
            "description": "Name"
          },
          "secondShow": {
            "type": "boolean",
            "example": false,
            "description": "Second Show"
          },
          "didPay": {
            "type": "boolean",
            "example": null,
            "description": "Did Pay"
          },
          "client": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client"
          },
          "profile": {
            "type": "string",
            "example": "shruthi",
            "description": "Profile"
          }
        },
        "required": [
          "chatId",
          "count",
          "payAmount",
          "demoGiven",
          "demoGivenToday",
          "newUser",
          "paidReply",
          "name",
          "secondShow",
          "didPay",
          "client",
          "profile"
        ]
      },
      "UpdateStatDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "6785668464",
            "description": "Chat ID"
          },
          "count": {
            "type": "number",
            "example": 12,
            "description": "Count"
          },
          "payAmount": {
            "type": "number",
            "example": 50,
            "description": "Pay Amount"
          },
          "demoGiven": {
            "type": "boolean",
            "example": true,
            "description": "Demo Given"
          },
          "demoGivenToday": {
            "type": "boolean",
            "example": true,
            "description": "Demo Given Today"
          },
          "newUser": {
            "type": "boolean",
            "example": false,
            "description": "New User"
          },
          "paidReply": {
            "type": "boolean",
            "example": true,
            "description": "Paid Reply"
          },
          "name": {
            "type": "string",
            "example": "Amaan Khan",
            "description": "Name"
          },
          "secondShow": {
            "type": "boolean",
            "example": false,
            "description": "Second Show"
          },
          "didPay": {
            "type": "boolean",
            "example": null,
            "description": "Did Pay"
          },
          "client": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client"
          },
          "profile": {
            "type": "string",
            "example": "shruthi",
            "description": "Profile"
          }
        }
      },
      "Map": {
        "type": "object",
        "properties": {}
      },
      "CreatePromoteStatDto": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client ID"
          },
          "data": {
            "example": {
              "Girls_Chating_Group_07": 4,
              "girls_friends_chatting_group_01": 14
            },
            "description": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "totalCount": {
            "type": "number",
            "example": 552,
            "description": "Total Count"
          },
          "uniqueChannels": {
            "type": "number",
            "example": 314,
            "description": "Unique Channels"
          },
          "releaseDay": {
            "type": "number",
            "example": 1719929752982,
            "description": "Release Day"
          },
          "lastUpdatedTimeStamp": {
            "type": "number",
            "example": 1719860106247,
            "description": "Last Updated TimeStamp"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Is Active"
          },
          "channels": {
            "example": [
              "And_Girls_Boys_Group_Chatting",
              "Girls_Chating_Group_07"
            ],
            "description": "Channels",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "client",
          "data",
          "totalCount",
          "uniqueChannels",
          "releaseDay",
          "lastUpdatedTimeStamp",
          "isActive",
          "channels"
        ]
      },
      "UpdatePromoteStatDto": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string",
            "example": "shruthi1",
            "description": "Client ID"
          },
          "data": {
            "example": {
              "Girls_Chating_Group_07": 4,
              "girls_friends_chatting_group_01": 14
            },
            "description": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "totalCount": {
            "type": "number",
            "example": 552,
            "description": "Total Count"
          },
          "uniqueChannels": {
            "type": "number",
            "example": 314,
            "description": "Unique Channels"
          },
          "releaseDay": {
            "type": "number",
            "example": 1719929752982,
            "description": "Release Day"
          },
          "lastUpdatedTimeStamp": {
            "type": "number",
            "example": 1719860106247,
            "description": "Last Updated TimeStamp"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Is Active"
          },
          "channels": {
            "example": [
              "And_Girls_Boys_Group_Chatting",
              "Girls_Chating_Group_07"
            ],
            "description": "Channels",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateSessionDto": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "description": "Phone number with country code (optional if session provided)",
            "example": "+1234567890"
          },
          "session": {
            "type": "string",
            "description": "Existing session string to use",
            "example": "1BVtsOHIBu2iBJgvn6U6SfJTgN6zPg2CwJjFBw5wHkJfFpBVts..."
          },
          "forceNew": {
            "type": "boolean",
            "description": "Force creation of new session even if active session exists",
            "default": false
          }
        }
      },
      "GetOldestSessionDto": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "description": "Phone number to get session for",
            "example": "+1234567890"
          },
          "allowFallback": {
            "type": "boolean",
            "description": "Force creation of new session if no valid old session exists",
            "default": true
          },
          "maxAgeDays": {
            "type": "number",
            "description": "Maximum age of session to consider (in days)",
            "default": 3000,
            "minimum": 1
          }
        }
      },
      "CreateProxyIpDto": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string",
            "example": "192.168.1.100",
            "description": "IP address of the proxy"
          },
          "port": {
            "type": "number",
            "example": 8080,
            "description": "Port number of the proxy"
          },
          "protocol": {
            "type": "string",
            "example": "http",
            "description": "Protocol type",
            "enum": [
              "http",
              "https",
              "socks5"
            ]
          },
          "username": {
            "type": "string",
            "example": "username",
            "description": "Username for proxy authentication"
          },
          "password": {
            "type": "string",
            "example": "password",
            "description": "Password for proxy authentication"
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Status of the proxy IP",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "assignedToClient": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns this IP"
          }
        },
        "required": [
          "ipAddress",
          "port",
          "protocol"
        ]
      },
      "ProxyIp": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string",
            "example": "192.168.1.100",
            "description": "IP address of the proxy"
          },
          "port": {
            "type": "number",
            "example": 8080,
            "description": "Port number of the proxy"
          },
          "protocol": {
            "type": "string",
            "example": "http",
            "description": "Protocol type (http, https, socks5)",
            "enum": [
              "http",
              "https",
              "socks5"
            ]
          },
          "username": {
            "type": "string",
            "example": "username",
            "description": "Username for proxy authentication"
          },
          "password": {
            "type": "string",
            "example": "password",
            "description": "Password for proxy authentication"
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Status of the proxy IP",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "isAssigned": {
            "type": "boolean",
            "example": false,
            "description": "Whether this IP is currently assigned to a mobile number"
          },
          "assignedToClient": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns this IP"
          }
        },
        "required": [
          "ipAddress",
          "port",
          "protocol",
          "username",
          "password",
          "status",
          "isAssigned",
          "assignedToClient"
        ]
      },
      "UpdateProxyIpDto": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string",
            "example": "192.168.1.100",
            "description": "IP address of the proxy"
          },
          "port": {
            "type": "number",
            "example": 8080,
            "description": "Port number of the proxy"
          },
          "protocol": {
            "type": "string",
            "example": "http",
            "description": "Protocol type",
            "enum": [
              "http",
              "https",
              "socks5"
            ]
          },
          "username": {
            "type": "string",
            "example": "username",
            "description": "Username for proxy authentication"
          },
          "password": {
            "type": "string",
            "example": "password",
            "description": "Password for proxy authentication"
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Status of the proxy IP",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "assignedToClient": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns this IP"
          }
        }
      },
      "AssignIpToMobileDto": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "example": "916265240911",
            "description": "Mobile number to assign IP to"
          },
          "clientId": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns this mobile number"
          },
          "preferredIp": {
            "type": "string",
            "example": "192.168.1.100:8080",
            "description": "Specific IP to assign (optional - if not provided, will auto-assign)"
          }
        },
        "required": [
          "mobile",
          "clientId"
        ]
      },
      "IpMobileMapping": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "example": "916265240911",
            "description": "Mobile number"
          },
          "ipAddress": {
            "type": "string",
            "example": "192.168.1.100:8080",
            "description": "IP address and port combination"
          },
          "clientId": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns this mobile number"
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Status of this mapping",
            "enum": [
              "active",
              "inactive"
            ]
          }
        },
        "required": [
          "mobile",
          "ipAddress",
          "clientId",
          "status"
        ]
      },
      "BulkAssignIpDto": {
        "type": "object",
        "properties": {
          "mobiles": {
            "example": [
              "916265240911",
              "916265240912"
            ],
            "description": "Array of mobile numbers to assign IPs to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string",
            "example": "client1",
            "description": "Client ID that owns these mobile numbers"
          }
        },
        "required": [
          "mobiles",
          "clientId"
        ]
      },
      "ReleaseIpFromMobileDto": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "example": "916265240911",
            "description": "Mobile number to release IP from"
          }
        },
        "required": [
          "mobile"
        ]
      }
    }
  },
  "security": [
    {
      "x-api-key": []
    }
  ]
}